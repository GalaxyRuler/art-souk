~/workspace$ npm run check

> rest-express@1.0.0 check
> tsc

client/src/components/ArtTimeline.tsx:74:21 - error TS2802: Type 'Set<number>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

74   const years = [...new Set(events.map(e => e.year))].sort();
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/components/ArtTimeline.tsx:370:84 - error TS18046: 'e' is of type 'unknown'.

370                 const maxEvents = Math.max(...Object.values(eventsByYear).map(e => e.length));
                                                                                       ~

client/src/components/ArtTimeline.tsx:387:57 - error TS7006: Parameter 'e' implicitly has an 'any' type.

387                         const count = yearEvents.filter(e => e.type === type).length;
                                                            ~

client/src/components/ArtworkCard.tsx:71:23 - error TS2339: Property 'isFavorite' does not exist on type '{}'.

71       if (isFavorite?.isFavorite) {
                         ~~~~~~~~~~

client/src/components/ArtworkCard.tsx:76:19 - error TS2353: Object literal may only specify known properties, and 'artworkId' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

76           body: { artworkId: artwork.id },
                     ~~~~~~~~~

client/src/components/ArtworkCard.tsx:84:28 - error TS2339: Property 'isFavorite' does not exist on type '{}'.

84         title: isFavorite?.isFavorite ? t("favorites.removed") : t("favorites.added"),
                              ~~~~~~~~~~

client/src/components/ArtworkCard.tsx:85:34 - error TS2339: Property 'isFavorite' does not exist on type '{}'.

85         description: isFavorite?.isFavorite ? t("favorites.removedDesc") : t("favorites.addedDesc"),
                                    ~~~~~~~~~~

client/src/components/ArtworkCard.tsx:159:35 - error TS2339: Property 'isFavorite' does not exist on type '{}'.

159                       isFavorite?.isFavorite ? "fill-red-500 text-red-500" : "text-brand-charcoal",
                                      ~~~~~~~~~~

client/src/components/CuratorsPicks.tsx:137:27 - error TS18046: 'artworks' is of type 'unknown'.

137   const displayArtworks = artworks.length > 0 ? artworks : mockArtworks;
                              ~~~~~~~~

client/src/components/CuratorsPicks.tsx:158:12 - error TS18046: 'displayArtworks' is of type 'unknown'.

158           {displayArtworks.map((artwork) => (
               ~~~~~~~~~~~~~~~

client/src/components/CuratorsPicks.tsx:158:33 - error TS7006: Parameter 'artwork' implicitly has an 'any' type.

158           {displayArtworks.map((artwork) => (
                                    ~~~~~~~

client/src/components/ErrorBoundary.tsx:37:49 - error TS2339: Property 'Sentry' does not exist on type 'Window & typeof globalThis'.

37     if (typeof window !== 'undefined' && window.Sentry) {
                                                   ~~~~~~

client/src/components/ErrorBoundary.tsx:38:14 - error TS2339: Property 'Sentry' does not exist on type 'Window & typeof globalThis'.

38       window.Sentry.captureException(error, {
                ~~~~~~

client/src/components/Navbar.tsx:76:24 - error TS2339: Property 'role' does not exist on type '{}'.

76                 {user?.role === 'admin' && (
                          ~~~~

client/src/components/Navbar.tsx:165:28 - error TS2339: Property 'role' does not exist on type '{}'.

165                     {user?.role === 'admin' && (
                               ~~~~

client/src/components/SocialComponents.tsx:56:41 - error TS2339: Property 'isFollowing' does not exist on type '{}'.

56       const isFollowing = followStatus?.isFollowing || initialFollowing;
                                           ~~~~~~~~~~~

client/src/components/SocialComponents.tsx:64:19 - error TS2353: Object literal may only specify known properties, and 'entityType' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

64           body: { entityType, entityId },
                     ~~~~~~~~~~

client/src/components/SocialComponents.tsx:73:41 - error TS2339: Property 'isFollowing' does not exist on type '{}'.

73       const isFollowing = followStatus?.isFollowing || initialFollowing;
                                           ~~~~~~~~~~~

client/src/components/SocialComponents.tsx:90:37 - error TS2339: Property 'isFollowing' does not exist on type '{}'.

90   const isFollowing = followStatus?.isFollowing || initialFollowing;
                                       ~~~~~~~~~~~

client/src/components/SocialComponents.tsx:137:35 - error TS2339: Property 'isLiked' does not exist on type '{}'.

137       const isLiked = likeStatus?.isLiked;
                                      ~~~~~~~

client/src/components/SocialComponents.tsx:145:19 - error TS2353: Object literal may only specify known properties, and 'entityType' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

145           body: { entityType, entityId },
                      ~~~~~~~~~~

client/src/components/SocialComponents.tsx:153:35 - error TS2339: Property 'isLiked' does not exist on type '{}'.

153       const isLiked = likeStatus?.isLiked;
                                      ~~~~~~~

client/src/components/SocialComponents.tsx:170:31 - error TS2339: Property 'isLiked' does not exist on type '{}'.

170   const isLiked = likeStatus?.isLiked;
                                  ~~~~~~~

client/src/components/SocialComponents.tsx:171:33 - error TS2339: Property 'likes' does not exist on type '{}'.

171   const likeCount = likeCounts?.likes || 0;
                                    ~~~~~

client/src/components/SocialComponents.tsx:218:17 - error TS2353: Object literal may only specify known properties, and 'entityType' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

218         body: { entityType, entityId, content },
                    ~~~~~~~~~~

client/src/components/SocialComponents.tsx:242:17 - error TS2353: Object literal may only specify known properties, and 'content' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

242         body: { content },
                    ~~~~~~~

client/src/components/SocialComponents.tsx:316:38 - error TS18046: 'comments' is of type 'unknown'.

316             {t("social.comments")} ({comments.length})
                                         ~~~~~~~~

client/src/components/SocialComponents.tsx:325:41 - error TS2339: Property 'profileImageUrl' does not exist on type '{}'.

325                 <AvatarImage src={user?.profileImageUrl} />
                                            ~~~~~~~~~~~~~~~

client/src/components/SocialComponents.tsx:327:26 - error TS2339: Property 'firstName' does not exist on type '{}'.

327                   {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase()}
                             ~~~~~~~~~

client/src/components/SocialComponents.tsx:327:50 - error TS2339: Property 'email' does not exist on type '{}'.

327                   {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase()}
                                                     ~~~~~

client/src/components/SocialComponents.tsx:355:12 - error TS18046: 'comments' is of type 'unknown'.

355           {comments.map((comment: any) => (
               ~~~~~~~~

client/src/components/SocialComponents.tsx:371:45 - error TS2339: Property 'id' does not exist on type '{}'.

371                   {comment.userId === user?.id && (
                                                ~~

client/src/components/SocialComponents.tsx:441:10 - error TS18046: 'comments' is of type 'unknown'.

441         {comments.length === 0 && (
             ~~~~~~~~

client/src/components/SocialComponents.tsx:485:46 - error TS2339: Property 'id' does not exist on type '{}'.

485     enabled: isAuthenticated && currentUser?.id === userId,
                                                 ~~

client/src/components/SocialComponents.tsx:490:37 - error TS2339: Property 'id' does not exist on type '{}'.

490   const isOwnProfile = currentUser?.id === userId;
                                        ~~

client/src/components/SocialComponents.tsx:497:37 - error TS2339: Property 'profileImageUrl' does not exist on type '{}'.

497             <AvatarImage src={user?.profileImageUrl} />
                                        ~~~~~~~~~~~~~~~

client/src/components/SocialComponents.tsx:499:22 - error TS2339: Property 'firstName' does not exist on type '{}'.

499               {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase()}
                         ~~~~~~~~~

client/src/components/SocialComponents.tsx:499:46 - error TS2339: Property 'email' does not exist on type '{}'.

499               {user?.firstName?.[0] || user?.email?.[0]?.toUpperCase()}
                                                 ~~~~~

client/src/components/SocialComponents.tsx:506:24 - error TS2339: Property 'firstName' does not exist on type '{}'.

506                 {user?.firstName && user?.lastName
                           ~~~~~~~~~

client/src/components/SocialComponents.tsx:506:43 - error TS2339: Property 'lastName' does not exist on type '{}'.

506                 {user?.firstName && user?.lastName
                                              ~~~~~~~~

client/src/components/SocialComponents.tsx:507:29 - error TS2339: Property 'firstName' does not exist on type '{}'.

507                   ? `${user.firstName} ${user.lastName}`
                                ~~~~~~~~~

client/src/components/SocialComponents.tsx:507:47 - error TS2339: Property 'lastName' does not exist on type '{}'.

507                   ? `${user.firstName} ${user.lastName}`
                                                  ~~~~~~~~

client/src/components/SocialComponents.tsx:508:27 - error TS2339: Property 'email' does not exist on type '{}'.

508                   : user?.email}
                              ~~~~~

client/src/components/SocialComponents.tsx:510:22 - error TS2339: Property 'role' does not exist on type '{}'.

510               {user?.role && user.role !== 'user' && (
                         ~~~~

client/src/components/SocialComponents.tsx:510:35 - error TS2339: Property 'role' does not exist on type '{}'.

510               {user?.role && user.role !== 'user' && (
                                      ~~~~

client/src/components/SocialComponents.tsx:511:50 - error TS2339: Property 'role' does not exist on type '{}'.

511                 <Badge variant="secondary">{user.role}</Badge>
                                                     ~~~~

client/src/components/SocialComponents.tsx:515:23 - error TS2339: Property 'bio' does not exist on type '{}'.

515             {profile?.bio && (
                          ~~~

client/src/components/SocialComponents.tsx:517:34 - error TS2339: Property 'bioAr' does not exist on type '{}'.

517                 {isRTL ? profile.bioAr || profile.bio : profile.bio}
                                     ~~~~~

client/src/components/SocialComponents.tsx:517:51 - error TS2339: Property 'bio' does not exist on type '{}'.

517                 {isRTL ? profile.bioAr || profile.bio : profile.bio}
                                                      ~~~

client/src/components/SocialComponents.tsx:517:65 - error TS2339: Property 'bio' does not exist on type '{}'.

517                 {isRTL ? profile.bioAr || profile.bio : profile.bio}
                                                                    ~~~

client/src/components/SocialComponents.tsx:522:25 - error TS2339: Property 'location' does not exist on type '{}'.

522               {profile?.location && (
                            ~~~~~~~~

client/src/components/SocialComponents.tsx:525:42 - error TS2339: Property 'locationAr' does not exist on type '{}'.

525                   <span>{isRTL ? profile.locationAr || profile.location : profile.location}</span>
                                             ~~~~~~~~~~

client/src/components/SocialComponents.tsx:525:64 - error TS2339: Property 'location' does not exist on type '{}'.

525                   <span>{isRTL ? profile.locationAr || profile.location : profile.location}</span>
                                                                   ~~~~~~~~

client/src/components/SocialComponents.tsx:525:83 - error TS2339: Property 'location' does not exist on type '{}'.

525                   <span>{isRTL ? profile.locationAr || profile.location : profile.location}</span>
                                                                                      ~~~~~~~~

client/src/components/SocialComponents.tsx:529:22 - error TS2339: Property 'createdAt' does not exist on type '{}'.

529               {user?.createdAt && (
                         ~~~~~~~~~

client/src/components/SocialComponents.tsx:532:71 - error TS2339: Property 'createdAt' does not exist on type '{}'.

532                   <span>{t("social.joinedDate", { date: new Date(user.createdAt).toLocaleDateString() })}</span>
                                                                          ~~~~~~~~~

client/src/components/SocialComponents.tsx:538:24 - error TS2339: Property 'website' does not exist on type '{}'.

538             {(profile?.website || profile?.instagram || profile?.twitter) && (
                           ~~~~~~~

client/src/components/SocialComponents.tsx:538:44 - error TS2339: Property 'instagram' does not exist on type '{}'.

538             {(profile?.website || profile?.instagram || profile?.twitter) && (
                                               ~~~~~~~~~

client/src/components/SocialComponents.tsx:538:66 - error TS2339: Property 'twitter' does not exist on type '{}'.

538             {(profile?.website || profile?.instagram || profile?.twitter) && (
                                                                     ~~~~~~~

client/src/components/SocialComponents.tsx:540:26 - error TS2339: Property 'website' does not exist on type '{}'.

540                 {profile.website && (
                             ~~~~~~~

client/src/components/SocialComponents.tsx:542:35 - error TS2339: Property 'website' does not exist on type '{}'.

542                     href={profile.website}
                                      ~~~~~~~

client/src/components/SocialComponents.tsx:551:26 - error TS2339: Property 'instagram' does not exist on type '{}'.

551                 {profile.instagram && (
                             ~~~~~~~~~

client/src/components/SocialComponents.tsx:553:60 - error TS2339: Property 'instagram' does not exist on type '{}'.

553                     href={`https://instagram.com/${profile.instagram}`}
                                                               ~~~~~~~~~

client/src/components/SocialComponents.tsx:558:31 - error TS2339: Property 'instagram' does not exist on type '{}'.

558                     @{profile.instagram}
                                  ~~~~~~~~~

client/src/components/SocialComponents.tsx:561:26 - error TS2339: Property 'twitter' does not exist on type '{}'.

561                 {profile.twitter && (
                             ~~~~~~~

client/src/components/SocialComponents.tsx:563:58 - error TS2339: Property 'twitter' does not exist on type '{}'.

563                     href={`https://twitter.com/${profile.twitter}`}
                                                             ~~~~~~~

client/src/components/SocialComponents.tsx:568:31 - error TS2339: Property 'twitter' does not exist on type '{}'.

568                     @{profile.twitter}
                                  ~~~~~~~

client/src/components/SocialComponents.tsx:576:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

576         {/* Activity Feed for own profile */}
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/components/SocialComponents.tsx:577:51 - error TS2339: Property 'length' does not exist on type '{}'.

577         {isOwnProfile && activities && activities.length > 0 && (
                                                      ~~~~~~

client/src/components/SocialComponents.tsx:584:27 - error TS2339: Property 'slice' does not exist on type '{}'.

584               {activities.slice(0, 5).map((activity: any) => (
                              ~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:94:17 - error TS2353: Object literal may only specify known properties, and 'role' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

94         body: { role },
                   ~~~~

client/src/components/admin/AdvancedUserManagement.tsx:111:17 - error TS2353: Object literal may only specify known properties, and 'action' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

111         body: { action },
                    ~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:165:36 - error TS2339: Property 'users' does not exist on type '{}'.

165   const filteredUsers = usersData?.users || [];
                                       ~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:166:33 - error TS2339: Property 'total' does not exist on type '{}'.

166   const totalUsers = usersData?.total || 0;
                                    ~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:167:57 - error TS2339: Property 'perPage' does not exist on type '{}'.

167   const totalPages = Math.ceil(totalUsers / (usersData?.perPage || 20));
                                                            ~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:179:61 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

179             <div className="text-2xl font-bold">{userStats?.totalUsers || 0}</div>
                                                                ~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:181:28 - error TS2339: Property 'newUsersThisMonth' does not exist on type '{}'.

181               +{userStats?.newUsersThisMonth || 0} {t('admin.thisMonth')}
                               ~~~~~~~~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:192:61 - error TS2339: Property 'activeUsers' does not exist on type '{}'.

192             <div className="text-2xl font-bold">{userStats?.activeUsers || 0}</div>
                                                                ~~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:194:27 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

194               {userStats?.totalUsers ? Math.round((userStats.activeUsers / userStats.totalUsers) * 100) : 0}% {t('admin.ofTotal')}
                              ~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:194:62 - error TS2339: Property 'activeUsers' does not exist on type '{}'.

194               {userStats?.totalUsers ? Math.round((userStats.activeUsers / userStats.totalUsers) * 100) : 0}% {t('admin.ofTotal')}
                                                                 ~~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:194:86 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

194               {userStats?.totalUsers ? Math.round((userStats.activeUsers / userStats.totalUsers) * 100) : 0}% {t('admin.ofTotal')}
                                                                                         ~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:205:61 - error TS2339: Property 'verifiedUsers' does not exist on type '{}'.

205             <div className="text-2xl font-bold">{userStats?.verifiedUsers || 0}</div>
                                                                ~~~~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:207:27 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

207               {userStats?.totalUsers ? Math.round((userStats.verifiedUsers / userStats.totalUsers) * 100) : 0}% {t('admin.verified')}
                              ~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:207:62 - error TS2339: Property 'verifiedUsers' does not exist on type '{}'.

207               {userStats?.totalUsers ? Math.round((userStats.verifiedUsers / userStats.totalUsers) * 100) : 0}% {t('admin.verified')}
                                                                 ~~~~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:207:88 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

207               {userStats?.totalUsers ? Math.round((userStats.verifiedUsers / userStats.totalUsers) * 100) : 0}% {t('admin.verified')}
                                                                                           ~~~~~~~~~~

client/src/components/admin/AdvancedUserManagement.tsx:495:16 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

495               <Tabs defaultValue="overview" className="w-full">
                   ~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:160:29 - error TS2339: Property 'totalViews' does not exist on type '{}'.

160           value={analytics?.totalViews?.toLocaleString() || '0'}
                                ~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:161:34 - error TS2339: Property 'viewsChange' does not exist on type '{}'.

161           change={`+${analytics?.viewsChange || 0}%`}
                                     ~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:163:29 - error TS2339: Property 'viewsChange' does not exist on type '{}'.

163           trend={analytics?.viewsChange > 0 ? 'up' : 'down'}
                                ~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:168:29 - error TS2339: Property 'uniqueVisitors' does not exist on type '{}'.

168           value={analytics?.uniqueVisitors?.toLocaleString() || '0'}
                                ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:169:34 - error TS2339: Property 'visitorsChange' does not exist on type '{}'.

169           change={`+${analytics?.visitorsChange || 0}%`}
                                     ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:171:29 - error TS2339: Property 'visitorsChange' does not exist on type '{}'.

171           trend={analytics?.visitorsChange > 0 ? 'up' : 'down'}
                                ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:176:32 - error TS2339: Property 'engagementRate' does not exist on type '{}'.

176           value={`${analytics?.engagementRate || 0}%`}
                                   ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:177:34 - error TS2339: Property 'engagementChange' does not exist on type '{}'.

177           change={`+${analytics?.engagementChange || 0}%`}
                                     ~~~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:179:29 - error TS2339: Property 'engagementChange' does not exist on type '{}'.

179           trend={analytics?.engagementChange > 0 ? 'up' : 'down'}
                                ~~~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:184:32 - error TS2339: Property 'conversionRate' does not exist on type '{}'.

184           value={`${analytics?.conversionRate || 0}%`}
                                   ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:185:34 - error TS2339: Property 'conversionChange' does not exist on type '{}'.

185           change={`+${analytics?.conversionChange || 0}%`}
                                     ~~~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:187:29 - error TS2339: Property 'conversionChange' does not exist on type '{}'.

187           trend={analytics?.conversionChange > 0 ? 'up' : 'down'}
                                ~~~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:193:8 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

193       <Tabs defaultValue="overview" className="space-y-6">
           ~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:213:47 - error TS2339: Property 'trafficData' does not exist on type '{}'.

213                   <AreaChart data={analytics?.trafficData || []}>
                                                  ~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:245:48 - error TS2339: Property 'funnelData' does not exist on type '{}'.

245                   <BarChart data={userJourney?.funnelData || []}>
                                                   ~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:266:38 - error TS2339: Property 'topArtworks' does not exist on type '{}'.

266                 {contentPerformance?.topArtworks?.slice(0, 5).map((artwork: any, index: number) => (
                                         ~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:301:40 - error TS2339: Property 'userTypes' does not exist on type '{}'.

301                       data={analytics?.userTypes || []}
                                           ~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:309:36 - error TS2339: Property 'userTypes' does not exist on type '{}'.

309                       {(analytics?.userTypes || []).map((entry: any, index: number) => (
                                       ~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:327:47 - error TS2339: Property 'userActivity' does not exist on type '{}'.

327                   <LineChart data={analytics?.userActivity || []}>
                                                  ~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:348:31 - error TS2339: Property 'stageBreakdown' does not exist on type '{}'.

348                 {userJourney?.stageBreakdown?.map((stage: any) => (
                                  ~~~~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:371:55 - error TS2339: Property 'byType' does not exist on type '{}'.

371                   <BarChart data={contentPerformance?.byType || []}>
                                                          ~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:394:49 - error TS2339: Property 'categories' does not exist on type '{}'.

394                       data={contentPerformance?.categories || []}
                                                    ~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:402:45 - error TS2339: Property 'categories' does not exist on type '{}'.

402                       {(contentPerformance?.categories || []).map((entry: any, index: number) => (
                                                ~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:425:38 - error TS2339: Property 'stages' does not exist on type '{}'.

425                   {conversionFunnel?.stages?.map((stage: any, index: number) => (
                                         ~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:454:54 - error TS2339: Property 'goals' does not exist on type '{}'.

454                   <LineChart data={conversionFunnel?.goals || []}>
                                                         ~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:480:47 - error TS2339: Property 'revenueData' does not exist on type '{}'.

480                   <AreaChart data={analytics?.revenueData || []}>
                                                  ~~~~~~~~~~~

client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:505:31 - error TS2339: Property 'topEarners' does not exist on type '{}'.

505                   {analytics?.topEarners?.slice(0, 5).map((artist: any, index: number) => (
                                  ~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:122:9 - error TS2322: Type 'Partial<NotificationSettings>' is not assignable to type 'BodyInit | null | undefined'.

122         body: newSettings,
            ~~~~

client/src/components/notifications/NotificationCenter.tsx:177:48 - error TS2339: Property 'filter' does not exist on type '{}'.

177   const filteredNotifications = notifications?.filter((notification: Notification) => {
                                                   ~~~~~~

client/src/components/notifications/NotificationCenter.tsx:183:38 - error TS2339: Property 'filter' does not exist on type '{}'.

183   const unreadCount = notifications?.filter((n: Notification) => !n.isRead).length || 0;
                                         ~~~~~~

client/src/components/notifications/NotificationCenter.tsx:383:33 - error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.

383                         [key]: !settings?.[key]
                                    ~~~~~~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:388:25 - error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.

388                         settings?.[key] ? 'bg-blue-600' : 'bg-gray-300'
                            ~~~~~~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:391:27 - error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.

391                           settings?.[key] ? 'ml-4' : 'ml-0.5'
                              ~~~~~~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:409:54 - error TS2339: Property 'emailNotifications' does not exist on type '{}'.

409                       emailNotifications: !settings?.emailNotifications
                                                         ~~~~~~~~~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:414:33 - error TS2339: Property 'emailNotifications' does not exist on type '{}'.

414                       settings?.emailNotifications ? 'bg-blue-600' : 'bg-gray-300'
                                    ~~~~~~~~~~~~~~~~~~

client/src/components/notifications/NotificationCenter.tsx:417:35 - error TS2339: Property 'emailNotifications' does not exist on type '{}'.

417                         settings?.emailNotifications ? 'ml-4' : 'ml-0.5'
                                      ~~~~~~~~~~~~~~~~~~

client/src/components/payment/PaymentMethodManager.tsx:145:11 - error TS2353: Object literal may only specify known properties, and 'name' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

145           name: data.name,
              ~~~~

client/src/components/payment/PaymentMethodManager.tsx:282:28 - error TS2339: Property 'options' does not exist on type '{ name: string; label: string; type: string; required: boolean; } | { name: string; label: string; type: string; required: boolean; options?: undefined; } | { name: string; label: string; type: string; options: string[]; required: boolean; }'.
  Property 'options' does not exist on type '{ name: string; label: string; type: string; required: boolean; }'.

282                     {field.options?.map((option) => (
                               ~~~~~~~

client/src/components/payment/PaymentMethodManager.tsx:282:42 - error TS7006: Parameter 'option' implicitly has an 'any' type.

282                     {field.options?.map((option) => (
                                             ~~~~~~

client/src/components/payment/PaymentMethodManager.tsx:329:43 - error TS2339: Property 'length' does not exist on type '{}'.

329       {(!paymentMethods || paymentMethods.length === 0) ? (
                                              ~~~~~~

client/src/components/payment/PaymentMethodManager.tsx:342:27 - error TS2339: Property 'map' does not exist on type '{}'.

342           {paymentMethods.map((method: PaymentMethod) => {
                              ~~~

client/src/hooks/useRoleSetup.ts:19:21 - error TS2339: Property 'setupComplete' does not exist on type '{}'.

19       if (!roleData.setupComplete) {
                       ~~~~~~~~~~~~~

client/src/hooks/useRoleSetup.ts:29:30 - error TS2339: Property 'setupComplete' does not exist on type '{}'.

29     setupComplete: roleData?.setupComplete || false,
                                ~~~~~~~~~~~~~

client/src/hooks/useRoleSetup.ts:30:26 - error TS2339: Property 'roles' does not exist on type '{}'.

30     userRoles: roleData?.roles || [],
                            ~~~~~

client/src/lib/i18n.ts:148:9 - error TS1117: An object literal cannot have multiple properties with the same name.

148         allCategories: "All Categories",
            ~~~~~~~~~~~~~

client/src/lib/i18n.ts:149:9 - error TS1117: An object literal cannot have multiple properties with the same name.

149         allStatus: "All Status",
            ~~~~~~~~~

client/src/lib/i18n.ts:150:9 - error TS1117: An object literal cannot have multiple properties with the same name.

150         published: "Published"
            ~~~~~~~~~

client/src/lib/i18n.ts:262:9 - error TS1117: An object literal cannot have multiple properties with the same name.

262         timeRemaining: "Time Remaining"
            ~~~~~~~~~~~~~

client/src/lib/i18n.ts:361:9 - error TS1117: An object literal cannot have multiple properties with the same name.

361         details: "Details",
            ~~~~~~~

client/src/lib/i18n.ts:363:9 - error TS1117: An object literal cannot have multiple properties with the same name.

363         title: "Title",
            ~~~~~

client/src/lib/i18n.ts:396:7 - error TS1117: An object literal cannot have multiple properties with the same name.

396       artists: {
          ~~~~~~~

client/src/lib/i18n.ts:851:7 - error TS1117: An object literal cannot have multiple properties with the same name.

851       auth: {
          ~~~~

client/src/lib/i18n.ts:1366:9 - error TS1117: An object literal cannot have multiple properties with the same name.

1366         timeRemaining: "الوقت المتبقي"
             ~~~~~~~~~~~~~

client/src/lib/i18n.ts:1593:9 - error TS1117: An object literal cannot have multiple properties with the same name.

1593         details: "التفاصيل",
             ~~~~~~~

client/src/lib/i18n.ts:1595:9 - error TS1117: An object literal cannot have multiple properties with the same name.

1595         title: "العنوان",
             ~~~~~

client/src/lib/queryClient.ts:64:7 - error TS2353: Object literal may only specify known properties, and 'cacheTime' does not exist in type 'OmitKeyof<QueryObserverOptions<unknown, Error, unknown, unknown, QueryKey, never>, "queryKey" | "suspense", "strictly">'.

64       cacheTime: 2 * 60 * 1000, // Reduce from 10min to 2min
         ~~~~~~~~~

client/src/pages/AchievementsPage.tsx:92:30 - error TS18046: 'achievements' is of type 'unknown'.

92   const earnedAchievements = achievements.filter((a: any) => a.earnedAt);
                                ~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:93:23 - error TS18046: 'badges' is of type 'unknown'.

93   const totalBadges = badges.length;
                         ~~~~~~

client/src/pages/AchievementsPage.tsx:107:21 - error TS2339: Property 'achievementPoints' does not exist on type '{}'.

107       value: stats?.achievementPoints || 0,
                        ~~~~~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:122:21 - error TS2339: Property 'profileCompleteness' does not exist on type '{}'.

122       value: stats?.profileCompleteness || 0,
                        ~~~~~~~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:130:23 - error TS18046: 'badges' is of type 'unknown'.

130   const rarityStats = badges.reduce((acc: any, badge: any) => {
                          ~~~~~~

client/src/pages/AchievementsPage.tsx:146:21 - error TS2339: Property 'profileImage' does not exist on type '{}'.

146             {artist.profileImage && (
                        ~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:148:29 - error TS2339: Property 'profileImage' does not exist on type '{}'.

148                 src={artist.profileImage}
                                ~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:149:29 - error TS2339: Property 'name' does not exist on type '{}'.

149                 alt={artist.name}
                                ~~~~

client/src/pages/AchievementsPage.tsx:155:45 - error TS2339: Property 'nameAr' does not exist on type '{}'.

155                 {language === 'ar' ? artist.nameAr : artist.name}
                                                ~~~~~~

client/src/pages/AchievementsPage.tsx:155:61 - error TS2339: Property 'name' does not exist on type '{}'.

155                 {language === 'ar' ? artist.nameAr : artist.name}
                                                                ~~~~

client/src/pages/AchievementsPage.tsx:188:10 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

188         <Tabs defaultValue="achievements" className="w-full">
             ~~~~

client/src/pages/AchievementsPage.tsx:225:30 - error TS2322: Type 'unknown' is not assignable to type 'any[]'.

225             <AchievementGrid achievements={achievements} progress={progress} />
                                 ~~~~~~~~~~~~

  client/src/components/AchievementBadge.tsx:196:3
    196   achievements: any[],
          ~~~~~~~~~~~~
    The expected type comes from property 'achievements' which is declared here on type 'IntrinsicAttributes & { achievements: any[]; progress: any[]; className?: string | undefined; }'

client/src/pages/AchievementsPage.tsx:225:58 - error TS2322: Type 'unknown' is not assignable to type 'any[]'.

225             <AchievementGrid achievements={achievements} progress={progress} />
                                                             ~~~~~~~~

  client/src/components/AchievementBadge.tsx:197:3
    197   progress: any[],
          ~~~~~~~~
    The expected type comes from property 'progress' which is declared here on type 'IntrinsicAttributes & { achievements: any[]; progress: any[]; className?: string | undefined; }'

client/src/pages/AchievementsPage.tsx:238:20 - error TS18046: 'progress' is of type 'unknown'.

238                   {progress
                       ~~~~~~~~

client/src/pages/AchievementsPage.tsx:301:63 - error TS2339: Property 'totalArtworks' does not exist on type '{}'.

301                       <span className="font-semibold">{stats?.totalArtworks || 0}</span>
                                                                  ~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:305:63 - error TS2339: Property 'totalFollowers' does not exist on type '{}'.

305                       <span className="font-semibold">{stats?.totalFollowers || 0}</span>
                                                                  ~~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:309:63 - error TS2339: Property 'totalWorkshops' does not exist on type '{}'.

309                       <span className="font-semibold">{stats?.totalWorkshops || 0}</span>
                                                                  ~~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:313:63 - error TS2339: Property 'totalExhibitions' does not exist on type '{}'.

313                       <span className="font-semibold">{stats?.totalExhibitions || 0}</span>
                                                                  ~~~~~~~~~~~~~~~~

client/src/pages/AchievementsPage.tsx:317:63 - error TS2339: Property 'averageRating' does not exist on type '{}'.

317                       <span className="font-semibold">{stats?.averageRating || '0.0'}/5.0</span>
                                                                  ~~~~~~~~~~~~~

client/src/pages/AdminDashboard.tsx:509:46 - error TS2554: Expected 0 arguments, but got 1.

509                       window.location.reload(true);
                                                 ~~~~

client/src/pages/AdminSetup.tsx:64:37 - error TS2339: Property 'email' does not exist on type '{}'.

64             <p>Current user: {user?.email}</p>
                                       ~~~~~

client/src/pages/AdminSetup.tsx:65:29 - error TS2339: Property 'roles' does not exist on type '{}'.

65             <p>Role: {user?.roles?.join(', ') || 'user'}</p>
                               ~~~~~

client/src/pages/AdminSetup.tsx:68:18 - error TS2339: Property 'roles' does not exist on type '{}'.

68           {user?.roles?.includes('admin') ? (
                    ~~~~~

client/src/pages/AdminTest.tsx:29:20 - error TS2339: Property 'role' does not exist on type '{}'.

29     enabled: user?.role === 'admin',
                      ~~~~

client/src/pages/AdminTest.tsx:36:20 - error TS2339: Property 'role' does not exist on type '{}'.

36     enabled: user?.role === 'admin',
                      ~~~~

client/src/pages/AdminTest.tsx:43:20 - error TS2339: Property 'role' does not exist on type '{}'.

43     enabled: user?.role === 'admin',
                      ~~~~

client/src/pages/AdminTest.tsx:50:20 - error TS2339: Property 'role' does not exist on type '{}'.

50     enabled: user?.role === 'admin',
                      ~~~~

client/src/pages/AdminTest.tsx:57:20 - error TS2339: Property 'role' does not exist on type '{}'.

57     enabled: user?.role === 'admin',
                      ~~~~

client/src/pages/AdminTest.tsx:69:60 - error TS2339: Property 'email' does not exist on type '{}'.

69       message: isAuthenticated ? `Authenticated as ${user?.email}` : 'Not authenticated',
                                                              ~~~~~

client/src/pages/AdminTest.tsx:75:21 - error TS2339: Property 'role' does not exist on type '{}'.

75       status: user?.role === 'admin' ? 'pass' : 'fail',
                       ~~~~

client/src/pages/AdminTest.tsx:76:22 - error TS2339: Property 'role' does not exist on type '{}'.

76       message: user?.role === 'admin' ? 'User has admin role' : `User role: ${user?.role || 'none'}`,
                        ~~~~

client/src/pages/AdminTest.tsx:76:85 - error TS2339: Property 'role' does not exist on type '{}'.

76       message: user?.role === 'admin' ? 'User has admin role' : `User role: ${user?.role || 'none'}`,
                                                                                       ~~~~

client/src/pages/AdminTest.tsx:84:42 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

84         ? `Retrieved stats: ${adminStats.totalUsers} users, ${adminStats.totalArtists} artists`
                                            ~~~~~~~~~~

client/src/pages/AdminTest.tsx:84:74 - error TS2339: Property 'totalArtists' does not exist on type '{}'.

84         ? `Retrieved stats: ${adminStats.totalUsers} users, ${adminStats.totalArtists} artists`
                                                                            ~~~~~~~~~~~~

client/src/pages/AdminTest.tsx:93:35 - error TS2339: Property 'length' does not exist on type '{}'.

93         ? `Retrieved ${adminUsers.length} users`
                                     ~~~~~~

client/src/pages/AdminTest.tsx:102:37 - error TS2339: Property 'length' does not exist on type '{}'.

102         ? `Retrieved ${adminArtists.length} artists`
                                        ~~~~~~

client/src/pages/AdminTest.tsx:111:39 - error TS2339: Property 'length' does not exist on type '{}'.

111         ? `Retrieved ${adminGalleries.length} galleries`
                                          ~~~~~~

client/src/pages/AdminTest.tsx:120:38 - error TS2339: Property 'length' does not exist on type '{}'.

120         ? `Retrieved ${adminArtworks.length} artworks`
                                         ~~~~~~

client/src/pages/AdminTest.tsx:126:40 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

126       const hasValidStats = adminStats.totalUsers >= 0 && adminStats.totalArtists >= 0;
                                           ~~~~~~~~~~

client/src/pages/AdminTest.tsx:126:70 - error TS2339: Property 'totalArtists' does not exist on type '{}'.

126       const hasValidStats = adminStats.totalUsers >= 0 && adminStats.totalArtists >= 0;
                                                                         ~~~~~~~~~~~~

client/src/pages/AdminTest.tsx:196:47 - error TS2339: Property 'email' does not exist on type '{}'.

196                   {isAuthenticated ? `${user?.email} (${user?.role || 'user'})` : 'Not authenticated'}
                                                  ~~~~~

client/src/pages/AdminTest.tsx:196:63 - error TS2339: Property 'role' does not exist on type '{}'.

196                   {isAuthenticated ? `${user?.email} (${user?.role || 'user'})` : 'Not authenticated'}
                                                                  ~~~~

client/src/pages/AdminTest.tsx:205:24 - error TS2339: Property 'role' does not exist on type '{}'.

205                 {user?.role !== 'admin' && (
                           ~~~~

client/src/pages/AdminTest.tsx:214:48 - error TS2339: Property 'role' does not exist on type '{}'.

214                   disabled={isRunning || user?.role !== 'admin'}
                                                   ~~~~

client/src/pages/AdminTest.tsx:225:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

225         {testResults.length > 0 && (
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
226           <Card>
    ~~~~~~~~~~~~~~~~
... 
261           </Card>
    ~~~~~~~~~~~~~~~~~
262         )}
    ~~~~~~~~~~

client/src/pages/AdminTest.tsx:300:16 - error TS2339: Property 'role' does not exist on type '{}'.

300         {user?.role === 'admin' && adminStats && (
                   ~~~~

client/src/pages/AdminTest.tsx:309:67 - error TS2339: Property 'totalUsers' does not exist on type '{}'.

309                   <div className="text-2xl font-bold">{adminStats.totalUsers}</div>
                                                                      ~~~~~~~~~~

client/src/pages/AdminTest.tsx:314:67 - error TS2339: Property 'totalArtists' does not exist on type '{}'.

314                   <div className="text-2xl font-bold">{adminStats.totalArtists}</div>
                                                                      ~~~~~~~~~~~~

client/src/pages/AdminTest.tsx:319:67 - error TS2339: Property 'totalGalleries' does not exist on type '{}'.

319                   <div className="text-2xl font-bold">{adminStats.totalGalleries}</div>
                                                                      ~~~~~~~~~~~~~~

client/src/pages/AdminTest.tsx:324:67 - error TS2339: Property 'totalArtworks' does not exist on type '{}'.

324                   <div className="text-2xl font-bold">{adminStats.totalArtworks}</div>
                                                                      ~~~~~~~~~~~~~

client/src/pages/Analytics.tsx:25:11 - error TS2339: Property 't' does not exist on type '{ language: string; toggleLanguage: () => void; isRTL: boolean; }'.

25   const { t, language } = useLanguage();
             ~

client/src/pages/Analytics.tsx:31:29 - error TS2339: Property 'role' does not exist on type '{}'.

31     enabled: !!user && user.role === "artist",
                               ~~~~

client/src/pages/Analytics.tsx:34:31 - error TS2339: Property 'find' does not exist on type '{}'.

34   const userArtist = artists?.find((artist: any) => artist.userId === user?.id);
                                 ~~~~

client/src/pages/Analytics.tsx:34:77 - error TS2339: Property 'id' does not exist on type '{}'.

34   const userArtist = artists?.find((artist: any) => artist.userId === user?.id);
                                                                               ~~

client/src/pages/Analytics.tsx:53:32 - error TS2339: Property 'map' does not exist on type '{}'.

53   const viewsData = analytics?.map((day: any) => ({
                                  ~~~

client/src/pages/Analytics.tsx:59:37 - error TS2339: Property 'map' does not exist on type '{}'.

59   const engagementData = analytics?.map((day: any) => ({
                                       ~~~

client/src/pages/Analytics.tsx:65:41 - error TS2339: Property 'reduce' does not exist on type '{}'.

65   const topSearchTerms = searchHistory?.reduce((acc: any, search: any) => {
                                           ~~~~~~

client/src/pages/Analytics.tsx:100:29 - error TS2339: Property 'reduce' does not exist on type '{}'.

100                 {analytics?.reduce((sum: number, day: any) => sum + day.artworkViews, 0) || 0}
                                ~~~~~~

client/src/pages/Analytics.tsx:117:18 - error TS7053: Element implicitly has an 'any' type because expression of type '0' can't be used to index type '{}'.
  Property '0' does not exist on type '{}'.

117                 {analytics?.[0]?.followers || 0}
                     ~~~~~~~~~~~~~~

client/src/pages/Analytics.tsx:134:29 - error TS2339: Property 'reduce' does not exist on type '{}'.

134                 {analytics?.reduce((sum: number, day: any) => sum + day.inquiries, 0) || 0}
                                ~~~~~~

client/src/pages/Analytics.tsx:151:54 - error TS7053: Element implicitly has an 'any' type because expression of type '0' can't be used to index type '{}'.
  Property '0' does not exist on type '{}'.

151                 {language === "ar" ? "ر.س" : "SAR"} {analytics?.[0]?.totalSales || "0"}
                                                         ~~~~~~~~~~~~~~

client/src/pages/Analytics.tsx:161:10 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

161         <Tabs defaultValue="views" className="space-y-4">
             ~~~~

client/src/pages/Analytics.tsx:284:37 - error TS2339: Property 'preferredCategories' does not exist on type '{}'.

284                       {preferences?.preferredCategories?.slice(0, 5).map((cat: string) => (
                                        ~~~~~~~~~~~~~~~~~~~

client/src/pages/Analytics.tsx:299:37 - error TS2339: Property 'preferredStyles' does not exist on type '{}'.

299                       {preferences?.preferredStyles?.slice(0, 5).map((style: string) => (
                                        ~~~~~~~~~~~~~~~

client/src/pages/AnalyticsDashboard.tsx:219:10 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

219         <Tabs defaultValue="funnel" className="space-y-6">
             ~~~~

client/src/pages/Artists.tsx:29:27 - error TS18046: 'artists' is of type 'unknown'.

29   const filteredArtists = artists.filter((artist: any) => {
                             ~~~~~~~

client/src/pages/Artists.tsx:80:10 - error TS18046: 'featuredArtists' is of type 'unknown'.

80         {featuredArtists.length > 0 && (
            ~~~~~~~~~~~~~~~

client/src/pages/Artists.tsx:87:18 - error TS18046: 'featuredArtists' is of type 'unknown'.

87                 {featuredArtists.slice(0, 3).map((artist: any) => (
                    ~~~~~~~~~~~~~~~

client/src/pages/ArtworkDetail.tsx:115:19 - error TS2353: Object literal may only specify known properties, and 'artworkId' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

115           body: { artworkId: parseInt(id!) },
                      ~~~~~~~~~

client/src/pages/ArtworkDetail.tsx:133:11 - error TS2353: Object literal may only specify known properties, and 'artworkId' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

133           artworkId: parseInt(id!),
              ~~~~~~~~~

client/src/pages/ArtworkDetail.tsx:342:34 - error TS2322: Type '{ children: Element; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

342                   <DialogTrigger asChild>
                                     ~~~~~~~

client/src/pages/ArtworkManagement.tsx:154:25 - error TS2339: Property 'roles' does not exist on type '{}'.

154     enabled: userRoles?.roles?.includes('artist'),
                            ~~~~~

client/src/pages/ArtworkManagement.tsx:159:25 - error TS2339: Property 'roles' does not exist on type '{}'.

159     enabled: userRoles?.roles?.includes('gallery'),
                            ~~~~~

client/src/pages/ArtworkManagement.tsx:166:22 - error TS2345: Argument of type '{}' is not assignable to parameter of type 'SetStateAction<Artist | Gallery | null>'.

166       setUserProfile(artistProfile);
                         ~~~~~~~~~~~~~

client/src/pages/ArtworkManagement.tsx:169:22 - error TS2345: Argument of type '{}' is not assignable to parameter of type 'SetStateAction<Artist | Gallery | null>'.

169       setUserProfile(galleryProfile);
                         ~~~~~~~~~~~~~~

client/src/pages/ArtworkManagement.tsx:374:19 - error TS2339: Property 'roles' does not exist on type '{}'.

374   if (!userRoles?.roles?.includes('artist') && !userRoles?.roles?.includes('gallery')) {
                      ~~~~~

client/src/pages/ArtworkManagement.tsx:374:60 - error TS2339: Property 'roles' does not exist on type '{}'.

374   if (!userRoles?.roles?.includes('artist') && !userRoles?.roles?.includes('gallery')) {
                                                               ~~~~~

client/src/pages/ArtworkManagement.tsx:396:36 - error TS2339: Property 'roles' does not exist on type '{}'.

396   const hasArtistRole = userRoles?.roles?.includes('artist');
                                       ~~~~~

client/src/pages/ArtworkManagement.tsx:397:37 - error TS2339: Property 'roles' does not exist on type '{}'.

397   const hasGalleryRole = userRoles?.roles?.includes('gallery');
                                        ~~~~~

client/src/pages/ArtworkManagement.tsx:492:28 - error TS2322: Type '{ children: Element; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

492             <DialogTrigger asChild>
                               ~~~~~~~

client/src/pages/AuctionDetail.tsx:101:17 - error TS2353: Object literal may only specify known properties, and 'amount' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

101         body: { amount },
                    ~~~~~~

client/src/pages/Auctions.tsx:160:67 - error TS18046: 'liveAuctions' is of type 'unknown'.

160                 <div className="text-2xl font-bold text-primary">{liveAuctions.length}</div>
                                                                      ~~~~~~~~~~~~

client/src/pages/Auctions.tsx:167:67 - error TS18046: 'upcomingAuctions' is of type 'unknown'.

167                 <div className="text-2xl font-bold text-primary">{upcomingAuctions.length}</div>
                                                                      ~~~~~~~~~~~~~~~~

client/src/pages/Auctions.tsx:175:20 - error TS18046: 'allAuctions' is of type 'unknown'.

175                   {allAuctions.reduce((total: number, auction: any) => total + (auction.bidCount || 0), 0)}
                       ~~~~~~~~~~~

client/src/pages/Auctions.tsx:183:67 - error TS18046: 'allAuctions' is of type 'unknown'.

183                 <div className="text-2xl font-bold text-primary">{allAuctions.length}</div>
                                                                      ~~~~~~~~~~~

client/src/pages/Auctions.tsx:217:21 - error TS18046: 'liveAuctions' is of type 'unknown'.

217                 ) : liveAuctions.length > 0 ? (
                        ~~~~~~~~~~~~

client/src/pages/Auctions.tsx:219:22 - error TS18046: 'liveAuctions' is of type 'unknown'.

219                     {liveAuctions.map((auction: any) => (
                         ~~~~~~~~~~~~

client/src/pages/Auctions.tsx:250:21 - error TS18046: 'upcomingAuctions' is of type 'unknown'.

250                 ) : upcomingAuctions.length > 0 ? (
                        ~~~~~~~~~~~~~~~~

client/src/pages/Auctions.tsx:252:22 - error TS18046: 'upcomingAuctions' is of type 'unknown'.

252                     {upcomingAuctions.map((auction: any) => (
                         ~~~~~~~~~~~~~~~~

client/src/pages/Auctions.tsx:283:21 - error TS18046: 'allAuctions' is of type 'unknown'.

283                 ) : allAuctions.length > 0 ? (
                        ~~~~~~~~~~~

client/src/pages/Auctions.tsx:285:22 - error TS18046: 'allAuctions' is of type 'unknown'.

285                     {allAuctions.map((auction: any) => (
                         ~~~~~~~~~~~

client/src/pages/AuthTest.tsx:32:13 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

 32             {isAuthenticated && user && (
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 33               <div className="bg-green-50 p-4 rounded-lg space-y-2">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
... 
 45               </div>
    ~~~~~~~~~~~~~~~~~~~~
 46             )}
    ~~~~~~~~~~~~~~

client/src/pages/AuthTest.tsx:34:52 - error TS2339: Property 'id' does not exist on type '{}'.

34                 <p><strong>User ID:</strong> {user.id}</p>
                                                      ~~

client/src/pages/AuthTest.tsx:35:50 - error TS2339: Property 'email' does not exist on type '{}'.

35                 <p><strong>Email:</strong> {user.email || "Not provided"}</p>
                                                    ~~~~~

client/src/pages/AuthTest.tsx:36:49 - error TS2339: Property 'firstName' does not exist on type '{}'.

36                 <p><strong>Name:</strong> {user.firstName} {user.lastName}</p>
                                                   ~~~~~~~~~

client/src/pages/AuthTest.tsx:36:66 - error TS2339: Property 'lastName' does not exist on type '{}'.

36                 <p><strong>Name:</strong> {user.firstName} {user.lastName}</p>
                                                                    ~~~~~~~~

client/src/pages/AuthTest.tsx:37:49 - error TS2339: Property 'role' does not exist on type '{}'.

37                 <p><strong>Role:</strong> {user.role || "user"}</p>
                                                   ~~~~

client/src/pages/AuthTest.tsx:38:23 - error TS2339: Property 'profileImageUrl' does not exist on type '{}'.

38                 {user.profileImageUrl && (
                         ~~~~~~~~~~~~~~~

client/src/pages/AuthTest.tsx:40:31 - error TS2339: Property 'profileImageUrl' does not exist on type '{}'.

40                     src={user.profileImageUrl}
                                 ~~~~~~~~~~~~~~~

client/src/pages/CollectorDashboard.tsx:201:33 - error TS2339: Property 'length' does not exist on type '{}'.

201                   {priceAlerts?.length || 0}
                                    ~~~~~~

client/src/pages/CommissionDetail.tsx:103:26 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; } & { ...; }'.

103       currency: request?.budgetCurrency || "SAR",
                             ~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:150:26 - error TS2339: Property 'role' does not exist on type '{}'.

150   const isArtist = user?.role === "artist";
                             ~~~~

client/src/pages/CommissionDetail.tsx:151:25 - error TS2339: Property 'id' does not exist on type '{}'.

151   const isOwner = user?.id === request.collectorId;
                            ~~

client/src/pages/CommissionDetail.tsx:172:33 - error TS7053: Element implicitly has an 'any' type because expression of type '"open" | "completed" | "cancelled" | "in_progress" | "expired"' can't be used to index type '{ open: string; closed: string; in_progress: string; completed: string; cancelled: string; }'.
  Property 'expired' does not exist on type '{ open: string; closed: string; in_progress: string; completed: string; cancelled: string; }'.

172               <Badge className={statusColors[request.status || "open"]}>
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:175:24 - error TS2339: Property 'featured' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; } & { ...; }'.

175               {request.featured && (
                           ~~~~~~~~

client/src/pages/CommissionDetail.tsx:240:64 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; } & { ...; }'.

240                     {formatCurrency(request.budgetMin, request.budgetCurrency)} -
                                                                   ~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:241:64 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; } & { ...; }'.

241                     {formatCurrency(request.budgetMax, request.budgetCurrency)}
                                                                   ~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:258:12 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

258           <Tabs defaultValue="bids" className="w-full">
               ~~~~

client/src/pages/CommissionDetail.tsx:281:49 - error TS2339: Property 'proposedPrice' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'.

281                             {formatCurrency(bid.proposedPrice, bid.currency)}
                                                    ~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:284:34 - error TS2339: Property 'estimatedDays' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'.

284                             {bid.estimatedDays} {t("commissions.days")}
                                     ~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:289:38 - error TS2551: Property 'proposalTextAr' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'. Did you mean 'proposalAr'?

289                         {isRTL ? bid.proposalTextAr : bid.proposalTextEn}
                                         ~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:289:59 - error TS2551: Property 'proposalTextEn' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'. Did you mean 'proposalEn'?

289                         {isRTL ? bid.proposalTextAr : bid.proposalTextEn}
                                                              ~~~~~~~~~~~~~~

client/src/pages/CommissionDetail.tsx:318:60 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; } & { ...; }'.

318                     {t("commissions.bidAmount")} ({request.budgetCurrency || "SAR"})
                                                               ~~~~~~~~~~~~~~

client/src/pages/CommissionRequests.tsx:58:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

 58         {user && (
            ~~~~~~~~~~
 59           <Link href="/commissions/new">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
... 
 64           </Link>
    ~~~~~~~~~~~~~~~~~
 65         )}
    ~~~~~~~~~~

client/src/pages/CommissionRequests.tsx:91:37 - error TS7053: Element implicitly has an 'any' type because expression of type '"open" | "completed" | "cancelled" | "in_progress" | "expired"' can't be used to index type '{ open: string; closed: string; in_progress: string; completed: string; cancelled: string; }'.
  Property 'expired' does not exist on type '{ open: string; closed: string; in_progress: string; completed: string; cancelled: string; }'.

91                   <Badge className={statusColors[request.status || "open"]}>
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/CommissionRequests.tsx:111:66 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; }'.

111                       {formatCurrency(request.budgetMin, request.budgetCurrency)} -
                                                                     ~~~~~~~~~~~~~~

client/src/pages/CommissionRequests.tsx:112:66 - error TS2339: Property 'budgetCurrency' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; }'.

112                       {formatCurrency(request.budgetMax, request.budgetCurrency)}
                                                                     ~~~~~~~~~~~~~~

client/src/pages/CommissionRequests.tsx:129:28 - error TS2339: Property 'featured' does not exist on type '{ style: string | null; id: number; status: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null; medium: string | null; createdAt: Date | null; category: string | null; ... 17 more ...; selectedBidId: number | null; }'.

129                   {request.featured && (
                               ~~~~~~~~

client/src/pages/CommissionRequests.tsx:146:11 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

146           {user && (
              ~~~~~~~~~~
147             <Link href="/commissions/new">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
... 
152             </Link>
    ~~~~~~~~~~~~~~~~~~~
153           )}
    ~~~~~~~~~~~~

client/src/pages/Community.tsx:76:31 - error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Error'.

76       if (isUnauthorizedError(error)) {
                                 ~~~~~

client/src/pages/Community.tsx:95:44 - error TS2339: Property 'filter' does not exist on type '{}'.

95   const filteredDiscussions = discussions?.filter((discussion: any) => {
                                              ~~~~~~

client/src/pages/Dashboard.tsx:106:9 - error TS2322: Type 'Partial<UserProfile>' is not assignable to type 'BodyInit | null | undefined'.

106         body: data,
            ~~~~

client/src/pages/Dashboard.tsx:177:81 - error TS2339: Property 'claims' does not exist on type '{}'.

177             {t("dashboard.welcomeBack", { name: userProfile?.firstName || user?.claims?.first_name })}
                                                                                    ~~~~~~

client/src/pages/Dashboard.tsx:187:75 - error TS2339: Property 'claims' does not exist on type '{}'.

187                   <AvatarImage src={userProfile?.profileImageUrl || user?.claims?.profile_image_url} />
                                                                              ~~~~~~

client/src/pages/Dashboard.tsx:189:60 - error TS2339: Property 'claims' does not exist on type '{}'.

189                     {(userProfile?.firstName?.[0] || user?.claims?.first_name?.[0] || 'U')}
                                                               ~~~~~~

client/src/pages/Dashboard.tsx:193:52 - error TS2339: Property 'claims' does not exist on type '{}'.

193                   {userProfile?.firstName || user?.claims?.first_name} {userProfile?.lastName || user?.claims?.last_name}
                                                       ~~~~~~

client/src/pages/Dashboard.tsx:193:104 - error TS2339: Property 'claims' does not exist on type '{}'.

193                   {userProfile?.firstName || user?.claims?.first_name} {userProfile?.lastName || user?.claims?.last_name}
                                                                                                           ~~~~~~

client/src/pages/Dashboard.tsx:196:48 - error TS2339: Property 'claims' does not exist on type '{}'.

196                   {userProfile?.email || user?.claims?.email}
                                                   ~~~~~~

client/src/pages/Dashboard.tsx:340:25 - error TS2339: Property 'roles' does not exist on type '{}'.

340                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                            ~~~~~

client/src/pages/Dashboard.tsx:340:60 - error TS2339: Property 'roles' does not exist on type '{}'.

340                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                                                               ~~~~~

client/src/pages/Dashboard.tsx:374:25 - error TS2339: Property 'roles' does not exist on type '{}'.

374                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                            ~~~~~

client/src/pages/Dashboard.tsx:374:60 - error TS2339: Property 'roles' does not exist on type '{}'.

374                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                                                               ~~~~~

client/src/pages/Dashboard.tsx:384:25 - error TS2339: Property 'roles' does not exist on type '{}'.

384                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                            ~~~~~

client/src/pages/Dashboard.tsx:384:60 - error TS2339: Property 'roles' does not exist on type '{}'.

384                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                                                               ~~~~~

client/src/pages/Dashboard.tsx:394:25 - error TS2339: Property 'roles' does not exist on type '{}'.

394                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                            ~~~~~

client/src/pages/Dashboard.tsx:394:60 - error TS2339: Property 'roles' does not exist on type '{}'.

394                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                                                               ~~~~~

client/src/pages/Dashboard.tsx:404:25 - error TS2339: Property 'roles' does not exist on type '{}'.

404                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                            ~~~~~

client/src/pages/Dashboard.tsx:404:60 - error TS2339: Property 'roles' does not exist on type '{}'.

404                 {(user?.roles?.includes('artist') || user?.roles?.includes('gallery')) && (
                                                               ~~~~~

client/src/pages/Dashboard.tsx:419:14 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

419             <Tabs defaultValue="favorites" className="space-y-6">
                 ~~~~

client/src/pages/Editorial.tsx:30:28 - error TS18046: 'articles' is of type 'unknown'.

30   const filteredArticles = articles.filter((article: any) => {
                              ~~~~~~~~

client/src/pages/Editorial.tsx:142:10 - error TS18046: 'featuredArticles' is of type 'unknown'.

142         {featuredArticles.length > 0 && (
             ~~~~~~~~~~~~~~~~

client/src/pages/Editorial.tsx:149:18 - error TS18046: 'featuredArticles' is of type 'unknown'.

149                 {featuredArticles.slice(0, 3).map((article: any, index: number) => (
                     ~~~~~~~~~~~~~~~~

client/src/pages/EmailTest.tsx:33:11 - error TS2353: Object literal may only specify known properties, and 'email' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

33           email,
             ~~~~~

client/src/pages/EmailTest.tsx:34:28 - error TS2339: Property 'firstName' does not exist on type '{}'.

34           firstName: user?.firstName || 'Friend',
                              ~~~~~~~~~

client/src/pages/EmailTest.tsx:35:27 - error TS2339: Property 'lastName' does not exist on type '{}'.

35           lastName: user?.lastName || '',
                             ~~~~~~~~

client/src/pages/EmailTest.tsx:59:16 - error TS2339: Property 'email' does not exist on type '{}'.

59     if (!user?.email) {
                  ~~~~~

client/src/pages/EmailTest.tsx:73:11 - error TS2353: Object literal may only specify known properties, and 'recipientEmail' does not exist in type 'ReadableStream<any> | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams'.

73           recipientEmail: user.email,
             ~~~~~~~~~~~~~~

client/src/pages/EmailTest.tsx:73:32 - error TS2339: Property 'email' does not exist on type '{}'.

73           recipientEmail: user.email,
                                  ~~~~~

client/src/pages/EmailTest.tsx:76:29 - error TS2339: Property 'firstName' does not exist on type '{}'.

76             firstName: user.firstName || 'Friend'
                               ~~~~~~~~~

client/src/pages/EmailTest.tsx:109:11 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

109           <Card className="bg-white/80 backdrop-blur-sm">
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
110             <CardHeader>
    ~~~~~~~~~~~~~~~~~~~~~~~~
... 
146             </CardContent>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~
147           </Card>
    ~~~~~~~~~~~~~~~~~

client/src/pages/EmailTest.tsx:164:49 - error TS2339: Property 'email' does not exist on type '{}'.

164                     Logged in as: <strong>{user.email}</strong>
                                                    ~~~~~

client/src/pages/EmailTest.tsx:183:25 - error TS2339: Property 'role' does not exist on type '{}'.

183                   {user.role !== 'admin' && (
                            ~~~~

client/src/pages/Events.tsx:65:31 - error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Error'.

65       if (isUnauthorizedError(error)) {
                                 ~~~~~

client/src/pages/Events.tsx:84:34 - error TS2339: Property 'filter' does not exist on type '{}'.

84   const filteredEvents = events?.filter((event: any) => {
                                    ~~~~~~

client/src/pages/Events.tsx:148:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

148         {/* Search and Filters */}
            ~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/Events.tsx:191:43 - error TS2339: Property 'length' does not exist on type '{}'.

191         {featuredEvents && featuredEvents.length > 0 && (
                                              ~~~~~~

client/src/pages/Events.tsx:197:31 - error TS2339: Property 'map' does not exist on type '{}'.

197               {featuredEvents.map((event: any) => (
                                  ~~~

client/src/pages/Galleries.tsx:31:29 - error TS18046: 'galleries' is of type 'unknown'.

31   const filteredGalleries = galleries.filter((gallery: any) => {
                               ~~~~~~~~~

client/src/pages/Galleries.tsx:141:10 - error TS18046: 'featuredGalleries' is of type 'unknown'.

141         {featuredGalleries.length > 0 && (
             ~~~~~~~~~~~~~~~~~

client/src/pages/Galleries.tsx:148:18 - error TS18046: 'featuredGalleries' is of type 'unknown'.

148                 {featuredGalleries.slice(0, 3).map((gallery: any) => (
                     ~~~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:49:82 - error TS2339: Property 'firstName' does not exist on type '{}'.

49                 <span className="text-gradient">{t("home.welcome", { name: user?.firstName || t("home.user") })}</span>
                                                                                    ~~~~~~~~~

client/src/pages/Home.tsx:66:73 - error TS18046: 'userFavorites' is of type 'unknown'.

66                 <div className="text-3xl font-bold text-gradient mb-1">{userFavorites.length}</div>
                                                                           ~~~~~~~~~~~~~

client/src/pages/Home.tsx:73:73 - error TS18046: 'featuredArtworks' is of type 'unknown'.

73                 <div className="text-3xl font-bold text-gradient mb-1">{featuredArtworks.length}</div>
                                                                           ~~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:80:73 - error TS18046: 'liveAuctions' is of type 'unknown'.

80                 <div className="text-3xl font-bold text-gradient mb-1">{liveAuctions.length}</div>
                                                                           ~~~~~~~~~~~~

client/src/pages/Home.tsx:87:73 - error TS18046: 'featuredArtists' is of type 'unknown'.

87                 <div className="text-3xl font-bold text-gradient mb-1">{featuredArtists.length}</div>
                                                                           ~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:121:17 - error TS18046: 'featuredArtworks' is of type 'unknown'.

121             ) : featuredArtworks.length > 0 ? (
                    ~~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:123:18 - error TS18046: 'featuredArtworks' is of type 'unknown'.

123                 {featuredArtworks.slice(0, 8).map((artwork: any) => (
                     ~~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:141:10 - error TS18046: 'liveAuctions' is of type 'unknown'.

141         {liveAuctions.length > 0 && (
             ~~~~~~~~~~~~

client/src/pages/Home.tsx:161:18 - error TS18046: 'liveAuctions' is of type 'unknown'.

161                 {liveAuctions.slice(0, 6).map((auction: any) => (
                     ~~~~~~~~~~~~

client/src/pages/Home.tsx:215:17 - error TS18046: 'featuredArtists' is of type 'unknown'.

215             ) : featuredArtists.length > 0 ? (
                    ~~~~~~~~~~~~~~~

client/src/pages/Home.tsx:217:18 - error TS18046: 'featuredArtists' is of type 'unknown'.

217                 {featuredArtists.slice(0, 6).map((artist: any) => (
                     ~~~~~~~~~~~~~~~

client/src/pages/InvoiceManagement.tsx:16:8 - error TS2613: Module '"/home/runner/workspace/client/src/components/Navbar"' has no default export. Did you mean to use 'import { Navbar } from "/home/runner/workspace/client/src/components/Navbar"' instead?

16 import Navbar from '@/components/Navbar';
          ~~~~~~

client/src/pages/InvoiceManagement.tsx:341:12 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

341           <Tabs defaultValue="invoices" className="w-full">
               ~~~~

client/src/pages/Landing.tsx:53:22 - error TS2322: Type '{ children: ReactNode; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

53       <DialogTrigger asChild>
                        ~~~~~~~

client/src/pages/ManageEvents.tsx:101:38 - error TS2339: Property 'type' does not exist on type '{}'.

101           organizerType: sellerInfo?.type || 'artist',
                                         ~~~~

client/src/pages/ManageEvents.tsx:275:34 - error TS2339: Property 'type' does not exist on type '{}'.

275   if (!sellerInfo || (sellerInfo.type !== 'artist' && sellerInfo.type !== 'gallery')) {
                                     ~~~~

client/src/pages/ManageEvents.tsx:275:66 - error TS2339: Property 'type' does not exist on type '{}'.

275   if (!sellerInfo || (sellerInfo.type !== 'artist' && sellerInfo.type !== 'gallery')) {
                                                                     ~~~~

client/src/pages/ManageEvents.tsx:302:28 - error TS2322: Type '{ children: Element; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

302             <DialogTrigger asChild>
                               ~~~~~~~

client/src/pages/ManageEvents.tsx:315:18 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

315                 <Tabs defaultValue="en" className="w-full">
                     ~~~~

client/src/pages/ManageWorkshops.tsx:103:39 - error TS2339: Property 'type' does not exist on type '{}'.

103           instructorType: sellerInfo?.type || 'artist',
                                          ~~~~

client/src/pages/ManageWorkshops.tsx:277:34 - error TS2339: Property 'type' does not exist on type '{}'.

277   if (!sellerInfo || (sellerInfo.type !== 'artist' && sellerInfo.type !== 'gallery')) {
                                     ~~~~

client/src/pages/ManageWorkshops.tsx:277:66 - error TS2339: Property 'type' does not exist on type '{}'.

277   if (!sellerInfo || (sellerInfo.type !== 'artist' && sellerInfo.type !== 'gallery')) {
                                                                     ~~~~

client/src/pages/ManageWorkshops.tsx:304:28 - error TS2322: Type '{ children: Element; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

304             <DialogTrigger asChild>
                               ~~~~~~~

client/src/pages/ManageWorkshops.tsx:317:18 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

317                 <Tabs defaultValue="en" className="w-full">
                     ~~~~

client/src/pages/RoleSelection.tsx:138:50 - error TS2554: Expected 1-2 arguments, but got 3.

138       await apiRequest('PUT', '/api/user/roles', { roles: selectedRoles });
                                                     ~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/RoleSelection.tsx:184:54 - error TS2339: Property 'firstName' does not exist on type '{}'.

184                 {t("roleSelection.welcome")}, {user?.firstName}
                                                         ~~~~~~~~~

client/src/pages/SellerDashboard.tsx:321:64 - error TS2339: Property 'totalOrders' does not exist on type '{}'.

321               <div className="text-2xl font-bold">{sellerInfo?.totalOrders || 0}</div>
                                                                   ~~~~~~~~~~~

client/src/pages/SellerDashboard.tsx:334:76 - error TS2339: Property 'totalRevenue' does not exist on type '{}'.

334               <div className="text-2xl font-bold">{formatPrice(sellerInfo?.totalRevenue || 0, 'SAR')}</div>
                                                                               ~~~~~~~~~~~~

client/src/pages/SellerDashboard.tsx:347:64 - error TS2339: Property 'pendingOrders' does not exist on type '{}'.

347               <div className="text-2xl font-bold">{sellerInfo?.pendingOrders || 0}</div>
                                                                   ~~~~~~~~~~~~~

client/src/pages/SellerDashboard.tsx:360:75 - error TS2339: Property 'type' does not exist on type '{}'.

360               <div className="text-2xl font-bold capitalize">{sellerInfo?.type || 'N/A'}</div>
                                                                              ~~~~

client/src/pages/SellerDashboard.tsx:362:30 - error TS2339: Property 'name' does not exist on type '{}'.

362                 {sellerInfo?.name || 'Unknown'}
                                 ~~~~

client/src/pages/SellerDashboard.tsx:413:34 - error TS2339: Property 'map' does not exist on type '{}'.

413                         {orders?.map((order: Order) => (
                                     ~~~

client/src/pages/SellerDashboard.tsx:468:38 - error TS2339: Property 'map' does not exist on type '{}'.

468                     {paymentMethods?.map((method: PaymentMethod) => (
                                         ~~~

client/src/pages/SellerDashboard.tsx:678:60 - error TS2345: Argument of type 'UseMutateFunction<any, Error, any, unknown>' is not assignable to parameter of type 'SubmitHandler<{ status: "pending"; sellerNotes: string; trackingNumber: string; carrier: string; }>'.
  Types of parameters 'options' and 'event' are incompatible.
    Type 'BaseSyntheticEvent<object, any, any> | undefined' is not assignable to type 'MutateOptions<any, Error, any, unknown> | undefined'.
      Type 'BaseSyntheticEvent<object, any, any>' has no properties in common with type 'MutateOptions<any, Error, any, unknown>'.

678               <form onSubmit={orderStatusForm.handleSubmit(updateOrderStatus.mutate)} className="space-y-4">
                                                               ~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/ShippingManagement.tsx:16:8 - error TS2613: Module '"/home/runner/workspace/client/src/components/Navbar"' has no default export. Did you mean to use 'import { Navbar } from "/home/runner/workspace/client/src/components/Navbar"' instead?

16 import Navbar from '@/components/Navbar';
          ~~~~~~

client/src/pages/ShippingManagement.tsx:254:12 - error TS2739: Type '{ children: Element[]; defaultValue: string; className: string; }' is missing the following properties from type '{ value: string; onValueChange: (value: string) => void; }': value, onValueChange

254           <Tabs defaultValue="profile" className="w-full">
               ~~~~

client/src/pages/ShippingManagement.tsx:341:42 - error TS2322: Type '{ children: Element; asChild: true; }' is not assignable to type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.
  Property 'asChild' does not exist on type 'IntrinsicAttributes & ButtonHTMLAttributes<HTMLButtonElement> & RefAttributes<HTMLButtonElement>'.

341                           <DialogTrigger asChild>
                                             ~~~~~~~

client/src/pages/TestCommissions.tsx:30:54 - error TS2554: Expected 1-2 arguments, but got 3.

30       apiRequest('/api/commission-requests', 'POST', data),
                                                        ~~~~

client/src/pages/TestCommissions.tsx:97:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

 97         {requests && Array.isArray(requests) && (
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 98           <div className="space-y-4">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
... 
118           </div>
    ~~~~~~~~~~~~~~~~
119         )}
    ~~~~~~~~~~

client/src/pages/UserPreferences.tsx:48:11 - error TS2339: Property 't' does not exist on type '{ language: string; toggleLanguage: () => void; isRTL: boolean; }'.

48   const { t, language } = useLanguage();
             ~

client/src/pages/Workshops.tsx:63:31 - error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Error'.

63       if (isUnauthorizedError(error)) {
                                 ~~~~~

client/src/pages/Workshops.tsx:82:40 - error TS2339: Property 'filter' does not exist on type '{}'.

82   const filteredWorkshops = workshops?.filter((workshop: any) => {
                                          ~~~~~~

client/src/pages/Workshops.tsx:144:9 - error TS2322: Type 'unknown' is not assignable to type 'string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | null | undefined'.

144         {/* Search and Filters */}
            ~~~~~~~~~~~~~~~~~~~~~~~~~~

client/src/pages/Workshops.tsx:188:49 - error TS2339: Property 'length' does not exist on type '{}'.

188         {featuredWorkshops && featuredWorkshops.length > 0 && (
                                                    ~~~~~~

client/src/pages/Workshops.tsx:194:34 - error TS2339: Property 'map' does not exist on type '{}'.

194               {featuredWorkshops.map((workshop: any) => (
                                     ~~~

server/emailService.ts:165:21 - error TS18047: 'email.attempts' is possibly 'null'.

165           attempts: email.attempts + 1
                        ~~~~~~~~~~~~~~

server/emailService.ts:210:19 - error TS18047: 'email.attempts' is possibly 'null'.

210           status: email.attempts >= 3 ? 'failed' : 'pending',
                      ~~~~~~~~~~~~~~

server/emailService.ts:248:23 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"newsletter_subscribers", { id: PgColumn<{ name: "id"; tableName: "newsletter_subscribers"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 10 more ...; lastEmailSentAt: PgColumn<.....'.

248         query = query.where(eq(newsletterSubscribers.language, options.language));
                          ~~~~~

server/index.ts:50:9 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

50 app.use(performanceMiddleware);
           ~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/index.ts:51:9 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

51 app.use(memoryMonitoringMiddleware);
           ~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/index.ts:52:9 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

52 app.use(requestLoggingMiddleware);
           ~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/index.ts:57:20 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => Promise<void>' is not assignable to parameter of type 'Application<Record<string, any>>'.
      Type '(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<...>' is missing the following properties from type 'Application<Record<string, any>>': init, defaultConfiguration, engine, set, and 63 more.

57 app.get('/health', healthCheckMiddleware);
                      ~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:164:5
    164     (path: PathParams, subApplication: Application): T;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The last overload is declared here.

server/index.ts:58:23 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response) => Promise<void>' is not assignable to parameter of type 'Application<Record<string, any>>'.
      Type '(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>) => Promise<...>' is missing the following properties from type 'Application<Record<string, any>>': init, defaultConfiguration, engine, set, and 63 more.

58 app.get('/health/db', databaseHealthCheck);
                         ~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:164:5
    164     (path: PathParams, subApplication: Application): T;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The last overload is declared here.

server/index.ts:59:27 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response) => void' is not assignable to parameter of type 'Application<Record<string, any>>'.
      Type '(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>) => void' is missing the following properties from type 'Application<Record<string, any>>': init, defaultConfiguration, engine, set, and 63 more.

59 app.get('/health/memory', memoryHealthCheck);
                             ~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:164:5
    164     (path: PathParams, subApplication: Application): T;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The last overload is declared here.

server/index.ts:60:26 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response) => Promise<Response<any, Record<string, any>> | undefined>' is not assignable to parameter of type 'Application<Record<string, any>>'.
      Type '(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>) => Promise<...>' is missing the following properties from type 'Application<Record<string, any>>': init, defaultConfiguration, engine, set, and 63 more.

60 app.get('/health/ready', readinessCheck);
                            ~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:164:5
    164     (path: PathParams, subApplication: Application): T;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The last overload is declared here.

server/index.ts:61:25 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response) => Promise<void>' is not assignable to parameter of type 'Application<Record<string, any>>'.
      Type '(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>) => Promise<...>' is missing the following properties from type 'Application<Record<string, any>>': init, defaultConfiguration, engine, set, and 63 more.

61 app.get('/health/live', livenessCheck);
                           ~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:164:5
    164     (path: PathParams, subApplication: Application): T;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    The last overload is declared here.

server/index.ts:68:14 - error TS2304: Cannot find name 'memoryTracking'.

68     samples: memoryTracking.samples.map(s => ({
                ~~~~~~~~~~~~~~

server/index.ts:68:41 - error TS7006: Parameter 's' implicitly has an 'any' type.

68     samples: memoryTracking.samples.map(s => ({
                                           ~

server/index.ts:74:12 - error TS2304: Cannot find name 'memoryTracking'.

74     trend: memoryTracking.samples.length >= 2 ?
              ~~~~~~~~~~~~~~

server/index.ts:75:8 - error TS2304: Cannot find name 'memoryTracking'.

75       (memoryTracking.samples[memoryTracking.samples.length - 1].heapUsed >
          ~~~~~~~~~~~~~~

server/index.ts:75:31 - error TS2304: Cannot find name 'memoryTracking'.

75       (memoryTracking.samples[memoryTracking.samples.length - 1].heapUsed >
                                 ~~~~~~~~~~~~~~

server/index.ts:76:8 - error TS2304: Cannot find name 'memoryTracking'.

76        memoryTracking.samples[memoryTracking.samples.length - 2].heapUsed ? 'increasing' : 'decreasing') : 'unknown'
          ~~~~~~~~~~~~~~

server/index.ts:76:31 - error TS2304: Cannot find name 'memoryTracking'.

76        memoryTracking.samples[memoryTracking.samples.length - 2].heapUsed ? 'increasing' : 'decreasing') : 'unknown'
                                 ~~~~~~~~~~~~~~

server/index.ts:98:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

98   app.use((req: Request, res: Response, next: NextFunction) => {
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/index.ts:111:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(err: any, _req: Request, res: Response, _next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

111   app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/middleware/cacheOptimization.ts:70:30 - error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'string | number'.
  Type 'undefined' is not assignable to type 'string | number'.

70         cache.set(key, data, ttl);
                                ~~~

server/middleware/cacheOptimization.ts:150:25 - error TS18048: 'cache.options.maxKeys' is possibly 'undefined'.

150       if (keys.length > cache.options.maxKeys * 0.8) {
                            ~~~~~~~~~~~~~~~~~~~~~

server/middleware/caching.ts:37:31 - error TS2802: Type 'MapIterator<[string, { data: any; expires: number; }]>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

37     for (const [key, item] of this.cache.entries()) {
                                 ~~~~~~~~~~~~~~~~~~~~

server/middleware/caching.ts:173:23 - error TS2802: Type 'MapIterator<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

173     for (const key of memoryCache['cache'].keys()) {
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/middleware/caching.ts:232:28 - error TS2802: Type 'MapIterator<[string, { data: any; expires: number; }]>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

232     for (const [, item] of cache.entries()) {
                               ~~~~~~~~~~~~~~~

server/middleware/imageOptimization.ts:3:20 - error TS7016: Could not find a declaration file for module 'multer'. '/home/runner/workspace/node_modules/multer/index.js' implicitly has an 'any' type.
  Try `npm i --save-dev @types/multer` if it exists or add a new declaration (.d.ts) file containing `declare module 'multer';`

3 import multer from 'multer';
                     ~~~~~~~~

server/middleware/imageOptimization.ts:23:16 - error TS7006: Parameter 'req' implicitly has an 'any' type.

23   fileFilter: (req, file, cb) => {
                  ~~~

server/middleware/imageOptimization.ts:23:21 - error TS7006: Parameter 'file' implicitly has an 'any' type.

23   fileFilter: (req, file, cb) => {
                       ~~~~

server/middleware/imageOptimization.ts:23:27 - error TS7006: Parameter 'cb' implicitly has an 'any' type.

23   fileFilter: (req, file, cb) => {
                             ~~

server/middleware/imageOptimization.ts:130:27 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

130         const files = req.files as Express.Multer.File[];
                              ~~~~~

server/middleware/imageOptimization.ts:130:44 - error TS2694: Namespace 'global.Express' has no exported member 'Multer'.

130         const files = req.files as Express.Multer.File[];
                                               ~~~~~~

server/middleware/imageOptimization.ts:197:36 - error TS2345: Argument of type 'any[]' is not assignable to parameter of type '[chunk: any, encoding: BufferEncoding, cb?: (() => void) | undefined]'.
  Target requires 2 element(s) but source may have fewer.

197     return originalEnd.apply(this, args);
                                       ~~~~

server/middleware/performance.ts:125:3 - error TS2322: Type '(chunk?: any, encoding?: any) => void' is not assignable to type '{ (cb?: (() => void) | undefined): Response<any, Record<string, any>>; (chunk: any, cb?: (() => void) | undefined): Response<any, Record<string, any>>; (chunk: any, encoding: BufferEncoding, cb?: (() => void) | undefined): Response<...>; }'.
  Type 'void' is not assignable to type 'Response<any, Record<string, any>>'.

125   res.end = function(chunk?: any, encoding?: any) {
      ~~~~~~~

server/middleware/security.ts:35:42 - error TS2802: Type 'MapIterator<[string, { token: string; expires: number; }]>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

35     for (const [sessionId, tokenData] of this.tokens.entries()) {
                                            ~~~~~~~~~~~~~~~~~~~~~

server/middleware/security.ts:72:39 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.

72   if (!csrfTokenManager.validateToken(sessionId, token as string)) {
                                         ~~~~~~~~~

server/middleware/security.ts:85:48 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.

85   const token = csrfTokenManager.generateToken(sessionId);
                                                  ~~~~~~~~~

server/middleware/security.ts:212:12 - error TS2339: Property 'file' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

212   if (!req.file && !req.files) {
               ~~~~

server/middleware/security.ts:212:25 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

212   if (!req.file && !req.files) {
                            ~~~~~

server/middleware/security.ts:231:21 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

231   const files = req.files ? (Array.isArray(req.files) ? req.files : [req.files]) : [req.file];
                        ~~~~~

server/middleware/security.ts:231:48 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

231   const files = req.files ? (Array.isArray(req.files) ? req.files : [req.files]) : [req.file];
                                                   ~~~~~

server/middleware/security.ts:231:61 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

231   const files = req.files ? (Array.isArray(req.files) ? req.files : [req.files]) : [req.file];
                                                                ~~~~~

server/middleware/security.ts:231:74 - error TS2339: Property 'files' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

231   const files = req.files ? (Array.isArray(req.files) ? req.files : [req.files]) : [req.file];
                                                                             ~~~~~

server/middleware/security.ts:231:89 - error TS2339: Property 'file' does not exist on type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.

231   const files = req.files ? (Array.isArray(req.files) ? req.files : [req.files]) : [req.file];
                                                                                            ~~~~

server/middleware/security.ts:266:57 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.

266     if (options.blacklist && options.blacklist.includes(clientIP)) {
                                                            ~~~~~~~~

server/middleware/security.ts:273:58 - error TS2345: Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
  Type 'undefined' is not assignable to type 'string'.

273     if (options.whitelist && !options.whitelist.includes(clientIP)) {
                                                             ~~~~~~~~

server/middleware/trackStage.ts:44:11 - error TS2430: Interface 'AuthenticatedRequest' incorrectly extends interface 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
  Types of property 'user' are incompatible.
    Type '{ claims: { sub: string; }; } | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
      Type '{ claims: { sub: string; }; }' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

44 interface AuthenticatedRequest extends Request {
             ~~~~~~~~~~~~~~~~~~~~

server/middleware/trackStage.ts:60:3 - error TS2322: Type '(chunk?: any, encoding?: any) => void' is not assignable to type '{ (cb?: (() => void) | undefined): Response<any, Record<string, any>>; (chunk: any, cb?: (() => void) | undefined): Response<any, Record<string, any>>; (chunk: any, encoding: BufferEncoding, cb?: (() => void) | undefined): Response<...>; }'.
  Type 'void' is not assignable to type 'Response<any, Record<string, any>>'.

60   res.end = function(chunk?: any, encoding?: any) {
     ~~~~~~~

server/replitAuth.ts:106:14 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(strategy: string | string[] | Strategy, callback?: AuthenticateCallback | ((...args: any[]) => any) | undefined): any', gave the following error.
    Object literal may only specify known properties, and 'prompt' does not exist in type 'AuthenticateCallback | ((...args: any[]) => any)'.
  Overload 2 of 2, '(strategy: string | string[] | Strategy, options: AuthenticateOptions, callback?: AuthenticateCallback | ((...args: any[]) => any) | undefined): any', gave the following error.
    Object literal may only specify known properties, and 'max_age' does not exist in type 'AuthenticateOptions'.

106     passport.authenticate(`replitauth:${req.hostname}`, {
                 ~~~~~~~~~~~~


server/replitAuth.ts:118:19 - error TS7006: Parameter 'err' implicitly has an 'any' type.

118     })(req, res, (err) => {
                      ~~~

server/replitAuth.ts:266:68 - error TS2339: Property 'id' does not exist on type 'User'.

266     console.log('✅ Authentication successful for user:', req.user?.id);
                                                                       ~~

server/routes.ts:69:11 - error TS2430: Interface 'AuthenticatedRequest' incorrectly extends interface 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
  Types of property 'user' are incompatible.
    Type '{ claims: { sub: string; }; }' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

69 interface AuthenticatedRequest extends Request {
             ~~~~~~~~~~~~~~~~~~~~

server/routes.ts:82:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

82   app.use(sessionDebugMiddleware);
             ~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:83:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => Promise<void>' is not assignable to parameter of type 'PathParams'.

83   app.use(sessionRecoveryMiddleware);
             ~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:84:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

84   app.use(sessionFixMiddleware);
             ~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:87:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '((req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => void)[]' is not assignable to parameter of type 'PathParams'.
      Type '((req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => void)[]' is not assignable to type '(string | RegExp)[]'.
        Type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to type 'string | RegExp'.

87   app.use(securityMiddlewareStack);
             ~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:90:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

90   app.use(performanceMiddleware);
             ~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:91:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void' is not assignable to parameter of type 'PathParams'.

91   app.use(memoryTrackingMiddleware);
             ~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:94:11 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response, next: NextFunction) => Promise<void>' is not assignable to parameter of type 'PathParams'.

94   app.use(trackStageMiddleware);
             ~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:231:30 - error TS2339: Property 'includes' does not exist on type '{}'.

231         isAdmin: user.roles?.includes('admin') || user.role === 'admin'
                                 ~~~~~~~~

server/routes.ts:244:5 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>' is not assignable to type 'import("/home/runner/workspace/node_modules/@types/express/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
                Type 'User' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

244     validateRequest({ body: commonSchemas.userProfileBody.pick({ roles: true }) }),
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:373:40 - error TS2339: Property 'includes' does not exist on type '{}'.

373       const hasAdminRole = user.roles?.includes('admin') || user.role === 'admin';
                                           ~~~~~~~~

server/routes.ts:472:71 - error TS2339: Property 'includes' does not exist on type '{}'.

472       const hasAdmin = allUsers.some(user => user.roles && user.roles.includes('admin'));
                                                                          ~~~~~~~~

server/routes.ts:496:30 - error TS2461: Type '{}' is not an array type.

496         const newRoles = [...currentRoles, 'admin'];
                                 ~~~~~~~~~~~~

server/routes.ts:518:51 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

518   app.get('/api/admin/artworks', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:536:63 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

536   app.patch('/api/admin/users/:userId/role', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:561:62 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

561   app.patch('/api/admin/:type/:id/feature', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:595:56 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

595   app.get('/api/admin/kyc-documents', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:613:62 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

613   app.patch('/api/admin/kyc-documents/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:629:9 - error TS2561: Object literal may only specify known properties, but 'reviewedAt' does not exist in type 'Partial<{ userId: string; sellerType: string; sellerId: number; documentType: "other" | "national_id" | "commercial_registration" | "business_license" | "articles_of_association" | "address_proof" | "bank_statement" | "authorized_personnel_list" | "beneficial_owners_list" | "tax_certificate"; ... 11 more ...; govern...'. Did you mean to write 'reviewedBy'?

629         reviewedAt: new Date(),
            ~~~~~~~~~~

server/routes.ts:775:37 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>' is not assignable to type 'import("/home/runner/workspace/node_modules/@types/express/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
                Type 'User' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

775   app.get('/api/artworks/featured', cacheConfigs.publicData, async (req, res) => {
                                        ~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:851:26 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>' is not assignable to type 'import("/home/runner/workspace/node_modules/@types/express/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
                Type 'User' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

851   app.get('/api/search', cacheConfigs.searchResults, async (req, res) => {
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:878:9 - error TS2322: Type '{ style: string | null; title: string; id: number; description: string | null; medium: string | null; featured: boolean | null; createdAt: Date | null; category: string | null; ... 13 more ...; styleAr: string | null; }[]' is not assignable to type 'never[]'.
  Type '{ style: string | null; title: string; id: number; description: string | null; medium: string | null; featured: boolean | null; createdAt: Date | null; category: string | null; ... 13 more ...; styleAr: string | null; }' is not assignable to type 'never'.

878         results.artworks = await storage.searchArtworks(query, filters);
            ~~~~~~~~~~~~~~~~

server/routes.ts:882:9 - error TS2322: Type '{ id: number; name: string; nameAr: string | null; nationality: string | null; featured: boolean | null; userId: string | null; website: string | null; instagram: string | null; createdAt: Date | null; ... 6 more ...; paymentMethods: unknown; }[]' is not assignable to type 'never[]'.
  Type '{ id: number; name: string; nameAr: string | null; nationality: string | null; featured: boolean | null; userId: string | null; website: string | null; instagram: string | null; createdAt: Date | null; ... 6 more ...; paymentMethods: unknown; }' is not assignable to type 'never'.

882         results.artists = await storage.searchArtists(query, filters);
            ~~~~~~~~~~~~~~~

server/routes.ts:886:9 - error TS2322: Type '{ id: number; name: string; email: string | null; location: string | null; description: string | null; nameAr: string | null; phone: string | null; featured: boolean | null; userId: string | null; ... 7 more ...; paymentMethods: unknown; }[]' is not assignable to type 'never[]'.
  Type '{ id: number; name: string; email: string | null; location: string | null; description: string | null; nameAr: string | null; phone: string | null; featured: boolean | null; userId: string | null; ... 7 more ...; paymentMethods: unknown; }' is not assignable to type 'never'.

886         results.galleries = await storage.searchGalleries(query, filters);
            ~~~~~~~~~~~~~~~~~

server/routes.ts:946:50 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

946   app.get('/api/user/artworks', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:957:22 - error TS2339: Property 'includes' does not exist on type '{}'.

957       if (!userRoles.includes('artist') && !userRoles.includes('gallery')) {
                         ~~~~~~~~

server/routes.ts:957:55 - error TS2339: Property 'includes' does not exist on type '{}'.

957       if (!userRoles.includes('artist') && !userRoles.includes('gallery')) {
                                                          ~~~~~~~~

server/routes.ts:964:21 - error TS2339: Property 'includes' does not exist on type '{}'.

964       if (userRoles.includes('artist')) {
                        ~~~~~~~~

server/routes.ts:969:28 - error TS2339: Property 'includes' does not exist on type '{}'.

969       } else if (userRoles.includes('gallery')) {
                               ~~~~~~~~

server/routes.ts:984:56 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

984   app.get('/api/user/artist-profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1001:57 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1001   app.get('/api/user/gallery-profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1030:33 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => void | Response<any, Record<string, any>>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>' is not assignable to type 'import("/home/runner/workspace/node_modules/@types/express/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
                Type 'User' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

1030   app.get('/api/auctions/live', cacheConfigs.shortTerm, async (req, res) => {
                                     ~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1091:5 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>> | undefined' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>' is not assignable to type 'import("/home/runner/workspace/node_modules/@types/express/index").Request<import("/home/runner/workspace/node_modules/@types/express-serve-static-core/index").ParamsDictionary, any, any, qs.ParsedQs, Record<string, any>>'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; } | undefined'.
                Type 'User' is missing the following properties from type '{ id: string; email: string; firstName?: string | undefined; lastName?: string | undefined; roles?: string[] | undefined; roleSetupComplete?: boolean | undefined; }': id, email

1091     validateRequest({
         ~~~~~~~~~~~~~~~~~
1092       body: commonSchemas.bidBody,
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1093       params: commonSchemas.idParam
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1094     }),
     ~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1347:38 - error TS2551: Property 'getArticles' does not exist on type 'DatabaseStorage'. Did you mean 'getArtist'?

1347       const articles = await storage.getArticles(limit, offset);
                                          ~~~~~~~~~~~

  server/storage.ts:651:9
    651   async getArtist(id: number): Promise<Artist | undefined> {
                ~~~~~~~~~
    'getArtist' is declared here.

server/routes.ts:1653:44 - error TS2551: Property 'getWorkshopEventReview' does not exist on type 'DatabaseStorage'. Did you mean 'getWorkshopEventReviews'?

1653       const existingReview = await storage.getWorkshopEventReview(id);
                                                ~~~~~~~~~~~~~~~~~~~~~~

  server/storage.ts:1597:9
    1597   async getWorkshopEventReviews(entityType: string, entityId: number): Promise<WorkshopEventReview[]> {
                 ~~~~~~~~~~~~~~~~~~~~~~~
    'getWorkshopEventReviews' is declared here.

server/routes.ts:1673:44 - error TS2551: Property 'getWorkshopEventReview' does not exist on type 'DatabaseStorage'. Did you mean 'getWorkshopEventReviews'?

1673       const existingReview = await storage.getWorkshopEventReview(id);
                                                ~~~~~~~~~~~~~~~~~~~~~~

  server/storage.ts:1597:9
    1597   async getWorkshopEventReviews(entityType: string, entityId: number): Promise<WorkshopEventReview[]> {
                 ~~~~~~~~~~~~~~~~~~~~~~~
    'getWorkshopEventReviews' is declared here.

server/routes.ts:1692:41 - error TS2339: Property 'hasUserReviewed' does not exist on type 'DatabaseStorage'.

1692       const hasReviewed = await storage.hasUserReviewed(userId, entityType, entityId);
                                             ~~~~~~~~~~~~~~~

server/routes.ts:1703:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1703   app.get('/api/collector/orders', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1721:15 - error TS2322: Type 'PgColumn<{ name: "name"; tableName: "artists"; dataType: "string"; columnType: "PgVarchar"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, { ...; }>' is not assignable to type 'string'.

1721               name: artists.name,
                   ~~~~

server/routes.ts:1754:55 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1754   app.get('/api/collector/wishlist', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1771:15 - error TS2322: Type 'PgColumn<{ name: "name"; tableName: "artists"; dataType: "string"; columnType: "PgVarchar"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, { ...; }>' is not assignable to type 'string'.

1771               name: artists.name,
                   ~~~~

server/routes.ts:1789:56 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1789   app.post('/api/collector/wishlist', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1816:69 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1816   app.delete('/api/collector/wishlist/:artworkId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1835:59 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1835   app.get('/api/collector/price-alerts', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1854:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1854   app.post('/api/collector/price-alerts', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1874:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1874   app.get('/api/collector/profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:1889:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

1889   app.put('/api/collector/profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2457:48 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2457   app.get('/api/seller/info', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2480:59 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2480   app.get('/api/seller/payment-methods', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2655:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2655   app.post('/api/seller/payment-methods', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2672:71 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2672   app.patch('/api/seller/payment-methods/:methodId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2685:72 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2685   app.delete('/api/seller/payment-methods/:methodId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2698:50 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2698   app.get('/api/seller/orders', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2715:68 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2715   app.patch('/api/seller/orders/:orderId/status', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2781:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2781   app.get('/api/newsletter/subscription', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2793:65 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2793   app.get('/api/admin/newsletter-subscribers', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2811:52 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2811   app.get('/api/email-templates', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2828:58 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2828   app.get('/api/email-templates/:code', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2851:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2851   app.post('/api/email-templates', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2873:58 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2873   app.patch('/api/email-templates/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2891:59 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2891   app.delete('/api/email-templates/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2910:62 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2910   app.get('/api/email-notifications/queue', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2931:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2931   app.get('/api/email-notifications/log', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2953:62 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2953   app.post('/api/email-notifications/test', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:2984:89 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

2984   app.get('/api/:entityType(workshops|events)/:entityId/participants', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3010:96 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3010   app.get('/api/:entityType(workshops|events)/:entityId/participants/export', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3039:113 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3039   app.post('/api/:entityType(workshops|events)/:entityId/participants/:participantId/checkin', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3065:97 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3065   app.post('/api/:entityType(workshops|events)/:entityId/participants/notify', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3095:85 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3095   app.get('/api/:entityType(workshops|events)/:entityId/waitlist', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3119:106 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3119   app.post('/api/:entityType(workshops|events)/:entityId/waitlist/:waitlistId/promote', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3139:86 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3139   app.get('/api/:entityType(workshops|events)/:entityId/conflicts', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3163:68 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3163   app.patch('/api/conflicts/:conflictId/resolve', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3181:87 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3181   app.post('/api/:entityType(workshops|events)/:entityId/reminders', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3205:51 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3205   app.get('/api/user/reminders', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3217:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3217   app.post('/api/calendar/connect', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3238:58 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3238   app.get('/api/calendar/integrations', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3249:76 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3249   app.delete('/api/calendar/integrations/:integrationId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3254:55 - error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.

3254       await storage.deleteCalendarIntegration(userId, parseInt(integrationId));
                                                           ~~~~~~~~~~~~~~~~~~~~~~~

server/routes.ts:3265:49 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3265   app.get('/api/privacy/dsar', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3286:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3286   app.get('/api/privacy/dsar/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3310:50 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3310   app.post('/api/privacy/dsar', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3329:55 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3329   app.patch('/api/privacy/dsar/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3353:55 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3353   app.get('/api/privacy/audit-logs', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3378:77 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3378   app.get('/api/privacy/audit-logs/:entityType/:entityId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3397:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3397   app.post('/api/privacy/reports', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3416:52 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3416   app.get('/api/privacy/reports', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3437:56 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3437   app.get('/api/privacy/reports/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3461:58 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3461   app.patch('/api/privacy/reports/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3484:74 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3484   app.get('/api/privacy/reports/:entityType/:entityId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3503:61 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3503   app.post('/api/privacy/auction-updates', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3522:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3522   app.get('/api/privacy/auction-updates', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3543:66 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3543   app.patch('/api/privacy/auction-updates/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3567:49 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3567   app.post('/api/privacy/kyc', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3586:70 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3586   app.get('/api/privacy/kyc/:sellerType/:sellerId', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3615:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3615   app.patch('/api/privacy/kyc/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3639:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3639   app.get('/api/user/shipping-addresses', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3650:64 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3650   app.get('/api/user/shipping-addresses/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3671:61 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3671   app.post('/api/user/shipping-addresses', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3690:66 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3690   app.patch('/api/user/shipping-addresses/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3709:67 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3709   app.delete('/api/user/shipping-addresses/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3728:77 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3728   app.post('/api/user/shipping-addresses/:id/set-default', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3773:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3773   app.get('/api/user/commissions', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3784:74 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3784   app.post('/api/commissions', rateLimiters.commission, isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3803:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3803   app.patch('/api/commissions/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3822:55 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3822   app.delete('/api/commissions/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3864:90 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3864   app.post('/api/commissions/:requestId/bids', rateLimiters.commission, isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3892:58 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3892   app.patch('/api/commission-bids/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3916:64 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3916   app.post('/api/commission-bids/:id/accept', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3927:62 - error TS2339: Property 'commissionRequestId' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'.

3927       const request = await storage.getCommissionRequest(bid.commissionRequestId);
                                                                  ~~~~~~~~~~~~~~~~~~~

server/routes.ts:3940:64 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3940   app.post('/api/commission-bids/:id/reject', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3951:62 - error TS2339: Property 'commissionRequestId' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'.

3951       const request = await storage.getCommissionRequest(bid.commissionRequestId);
                                                                  ~~~~~~~~~~~~~~~~~~~

server/routes.ts:3965:68 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3965   app.get('/api/commissions/:requestId/messages', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:3978:47 - error TS2339: Property 'commissionRequestId' does not exist on type '{ id: number; status: "pending" | "rejected" | "accepted" | "withdrawn" | null; createdAt: Date; bidAmount: string; currency: string | null; updatedAt: Date; artistId: number; ... 4 more ...; portfolioSamples: string[] | null; }'.

3978       const hasBid = userBids.some(bid => bid.commissionRequestId === parseInt(requestId));
                                                   ~~~~~~~~~~~~~~~~~~~

server/routes.ts:3992:91 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

3992   app.post('/api/commissions/:requestId/messages', rateLimiters.contact, isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4031:68 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4031   app.get('/api/commissions/:requestId/contract', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4063:69 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4063   app.post('/api/commissions/:requestId/contract', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4096:62 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4096   app.get('/api/admin/export/translations', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4126:61 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4126   app.get('/api/lifecycle/funnel-metrics', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4136:64 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4136   app.get('/api/lifecycle/user-interactions', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4148:63 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4148   app.get('/api/lifecycle/user-transitions', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4160:60 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4160   app.get('/api/lifecycle/admin/metrics', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4165:21 - error TS18046: 'user.roles' is of type 'unknown'.

4165       if (!user || !user.roles.includes('admin')) {
                         ~~~~~~~~~~

server/routes.ts:4177:68 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4177   app.post('/api/lifecycle/admin/update-metrics', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4182:21 - error TS18046: 'user.roles' is of type 'unknown'.

4182       if (!user || !user.roles.includes('admin')) {
                         ~~~~~~~~~~

server/routes.ts:4215:51 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4215   app.post('/api/conversations', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4236:50 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4236   app.get('/api/conversations', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4247:63 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4247   app.get('/api/conversations/:id/messages', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4258:64 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4258   app.post('/api/conversations/:id/messages', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4279:55 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4279   app.post('/api/messages/:id/read', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4362:53 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4362   app.get('/api/shipping/profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4378:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4378   app.post('/api/shipping/profile', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4399:45 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<void>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4399   app.get('/api/invoices', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4416:46 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4416   app.post('/api/invoices', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4428:11 - error TS2769: No overload matches this call.
  Overload 1 of 3, '(left: PgColumn<{ name: "artist_id"; tableName: "artworks"; dataType: "number"; columnType: "PgInteger"; data: number; driverParam: string | number; notNull: false; hasDefault: false; isPrimaryKey: false; ... 5 more ...; generated: undefined; }, {}, {}>, right: number | SQLWrapper): SQL<...>', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'number | SQLWrapper'.
  Overload 2 of 3, '(left: Aliased<string>, right: string | SQLWrapper): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "artist_id"; tableName: "artworks"; dataType: "number"; columnType: "PgInteger"; data: number; driverParam: string | number; notNull: false; hasDefault: false; isPrimaryKey: false; ... 5 more ...; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'Aliased<string>'.
      Type 'PgColumn<{ name: "artist_id"; tableName: "artworks"; dataType: "number"; columnType: "PgInteger"; data: number; driverParam: string | number; notNull: false; hasDefault: false; isPrimaryKey: false; ... 5 more ...; generated: undefined; }, {}, {}>' is missing the following properties from type 'Aliased<string>': sql, fieldAlias
  Overload 3 of 3, '(left: never, right: unknown): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "artist_id"; tableName: "artworks"; dataType: "number"; columnType: "PgInteger"; data: number; driverParam: string | number; notNull: false; hasDefault: false; isPrimaryKey: false; ... 5 more ...; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'never'.

4428           eq(schema.artworks.artistId, userId)
               ~~


server/routes.ts:4438:26 - error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

4438       const vatAmount = (subtotal * vatRate) / 100;
                              ~~~~~~~~

server/routes.ts:4495:51 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4495   app.patch('/api/invoices/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4527:54 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4527   app.post('/api/invoices/:id/pdf', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes.ts:4556:63 - error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to parameter of type 'RequestHandlerParams<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
      Type '(req: AuthenticatedRequest, res: Response<any, Record<string, any>, number>) => Promise<Response<any, Record<string, any>, number> | undefined>' is not assignable to type 'RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>'.
        Types of parameters 'req' and 'req' are incompatible.
          Type 'Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>' is not assignable to type 'AuthenticatedRequest'.
            Types of property 'user' are incompatible.
              Type 'User | undefined' is not assignable to type '{ claims: { sub: string; }; }'.
                Type 'undefined' is not assignable to type '{ claims: { sub: string; }; }'.

4556   app.post('/api/invoices/:id/zatca-submit', isAuthenticated, async (req: AuthenticatedRequest, res) => {
                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  node_modules/@types/express-serve-static-core/index.d.ts:153:5
    153     <
            ~
    154         P = ParamsDictionary,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ... 
    162         ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    163     ): T;
        ~~~~~~~~~
    The last overload is declared here.

server/routes/admin.ts:40:38 - error TS2339: Property 'includes' does not exist on type '{}'.

40     const hasAdminRole = user.roles?.includes('admin') || user.role === 'admin';
                                        ~~~~~~~~

server/routes/admin.ts:139:36 - error TS2339: Property 'updateKycDocumentStatus' does not exist on type 'DatabaseStorage'.

139     const document = await storage.updateKycDocumentStatus(id, verificationStatus, verificationNotes);
                                       ~~~~~~~~~~~~~~~~~~~~~~~

server/routes/admin.ts:186:7 - error TS2740: Type 'Omit<PgSelectBase<"users", { id: PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgVarchar"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, { ...; }>; ... 7 more ...; lifecycleSt...' is missing the following properties from type 'PgSelectBase<"users", { id: PgColumn<{ name: "id"; tableName: "users"; dataType: "string"; columnType: "PgVarchar"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, { ...; }>; ... 7 more ...; lifecycleStage: ...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

186       query = query.where(and(...conditions));
          ~~~~~

server/routes/admin.ts:226:9 - error TS7034: Variable 'userArtworks' implicitly has type 'any[]' in some locations where its type cannot be determined.

226     let userArtworks = [];
            ~~~~~~~~~~~~

server/routes/admin.ts:237:17 - error TS7005: Variable 'userArtworks' implicitly has an 'any[]' type.

237       artworks: userArtworks,
                    ~~~~~~~~~~~~

server/routes/admin.ts:267:26 - error TS2802: Type 'Set<any>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.

267       updatedRoles = [...new Set([...updatedRoles, ...roles])];
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/routes/admin.ts:267:38 - error TS2461: Type '{}' is not an array type.

267       updatedRoles = [...new Set([...updatedRoles, ...roles])];
                                         ~~~~~~~~~~~~

server/routes/admin.ts:269:35 - error TS2339: Property 'filter' does not exist on type '{}'.

269       updatedRoles = updatedRoles.filter(role => !roles.includes(role));
                                      ~~~~~~

server/routes/admin.ts:269:42 - error TS7006: Parameter 'role' implicitly has an 'any' type.

269       updatedRoles = updatedRoles.filter(role => !roles.includes(role));
                                             ~~~~

server/routes/admin.ts:304:7 - error TS2740: Type 'Omit<PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 5 more ...; createdAt: PgCo...' is missing the following properties from type 'PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 5 more ...; createdAt: PgColumn<...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

304       query = query.where(
          ~~~~~

server/routes/admin.ts:353:7 - error TS2740: Type 'Omit<PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 5 more ...; createdAt: PgColumn<...>; }, ... 5 ...' is missing the following properties from type 'PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 5 more ...; createdAt: PgColumn<...>; }, ... 5 more ...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

353       query = query.where(
          ~~~~~

server/routes/admin.ts:404:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 7 more ...; createdAt: PgColumn<...>; }, ... 5 mo...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 7 more ...; createdAt: PgColum...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

404       query = query.where(
          ~~~~~

server/routes/admin.ts:455:7 - error TS2740: Type 'Omit<PgSelectBase<"reports", { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgCo...' is missing the following properties from type 'PgSelectBase<"reports", { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

455       query = query.where(and(...conditions));
          ~~~~~

server/routes/admin.ts:490:9 - error TS2353: Object literal may only specify known properties, and 'adminNotes' does not exist in type '{ type?: "other" | SQL<unknown> | "spam" | "inappropriate" | "fake" | "copyright" | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; ... 9 more ...; resolution?: string | ... 3 more ... | undefined; }'.

490         adminNotes: notes,
            ~~~~~~~~~~

server/routes/admin.ts:492:21 - error TS18048: 'req.user' is possibly 'undefined'.

492         resolvedBy: req.user.id
                        ~~~~~~~~

server/routes/admin.ts:492:30 - error TS2339: Property 'id' does not exist on type 'User'.

492         resolvedBy: req.user.id
                                 ~~

server/routes/seller.ts:53:23 - error TS2339: Property 'bio' does not exist on type '{ id: number; userId: string | null; name: string; nameAr: string | null; biography: string | null; biographyAr: string | null; nationality: string | null; birthYear: number | null; ... 7 more ...; updatedAt: Date | null; }'.

53           bio: artist.bio,
                         ~~~

server/routes/seller.ts:125:47 - error TS2339: Property 'length' does not exist on type '{}'.

125       isDefault: isDefault || existingMethods.length === 0, // First method becomes default
                                                  ~~~~~~

server/routes/seller.ts:131:44 - error TS2339: Property 'map' does not exist on type '{}'.

131     const updatedMethods = existingMethods.map(method => ({
                                               ~~~

server/routes/seller.ts:131:48 - error TS7006: Parameter 'method' implicitly has an 'any' type.

131     const updatedMethods = existingMethods.map(method => ({
                                                   ~~~~~~

server/routes/seller.ts:170:44 - error TS2339: Property 'map' does not exist on type '{}'.

170     const updatedMethods = existingMethods.map(method => {
                                               ~~~

server/routes/seller.ts:170:48 - error TS7006: Parameter 'method' implicitly has an 'any' type.

170     const updatedMethods = existingMethods.map(method => {
                                                   ~~~~~~

server/routes/seller.ts:183:30 - error TS7006: Parameter 'method' implicitly has an 'any' type.

183       updatedMethods.forEach(method => {
                                 ~~~~~~

server/routes/seller.ts:221:44 - error TS2339: Property 'filter' does not exist on type '{}'.

221     const updatedMethods = existingMethods.filter(method => method.id !== methodId);
                                               ~~~~~~

server/routes/seller.ts:221:51 - error TS7006: Parameter 'method' implicitly has an 'any' type.

221     const updatedMethods = existingMethods.filter(method => method.id !== methodId);
                                                      ~~~~~~

server/routes/seller.ts:224:59 - error TS7006: Parameter 'm' implicitly has an 'any' type.

224     if (updatedMethods.length > 0 && !updatedMethods.some(m => m.isDefault)) {
                                                              ~

server/routes/seller.ts:269:34 - error TS2339: Property 'buyerEmail' does not exist on type 'PgTableWithColumns<{ name: "purchase_orders"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "purchase_orders"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 16 more ...; updatedAt: PgColumn<......'.

269       buyerEmail: purchaseOrders.buyerEmail,
                                     ~~~~~~~~~~

server/routes/seller.ts:270:32 - error TS2339: Property 'quantity' does not exist on type 'PgTableWithColumns<{ name: "purchase_orders"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "purchase_orders"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 16 more ...; updatedAt: PgColumn<......'.

270       quantity: purchaseOrders.quantity,
                                   ~~~~~~~~

server/routes/seller.ts:271:34 - error TS2339: Property 'totalPrice' does not exist on type 'PgTableWithColumns<{ name: "purchase_orders"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "purchase_orders"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 16 more ...; updatedAt: PgColumn<......'.

271       totalPrice: purchaseOrders.totalPrice,
                                     ~~~~~~~~~~

server/routes/seller.ts:277:38 - error TS2339: Property 'trackingNumber' does not exist on type 'PgTableWithColumns<{ name: "purchase_orders"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "purchase_orders"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 16 more ...; updatedAt: PgColumn<......'.

277       trackingNumber: purchaseOrders.trackingNumber,
                                         ~~~~~~~~~~~~~~

server/routes/seller.ts:278:31 - error TS2339: Property 'carrier' does not exist on type 'PgTableWithColumns<{ name: "purchase_orders"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "purchase_orders"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 16 more ...; updatedAt: PgColumn<......'.

278       carrier: purchaseOrders.carrier
                                  ~~~~~~~

server/seed.ts:894:63 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<...> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '({ artistId: number; galleryId: number; title: string; titleAr: string; description: string; descriptionAr: string; medium: string; dimensions: string; year: number; price: number; currency: string; status: string; featured: boolean; images: string[]; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<unknown> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }'.
      Property 'title' is missing in type '({ artistId: number; galleryId: number; title: string; titleAr: string; description: string; descriptionAr: string; medium: string; dimensions: string; year: number; price: number; currency: string; status: string; featured: boolean; images: string[]; } | { ...; })[]' but required in type '{ title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<unknown> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }'.
  Overload 2 of 2, '(values: { title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<...> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '({ artistId: number; galleryId: number; title: string; titleAr: string; description: string; descriptionAr: string; medium: string; dimensions: string; year: number; price: number; currency: string; status: string; featured: boolean; images: string[]; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<unknown> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }[]'.
      Type '{ artistId: number; galleryId: number; title: string; titleAr: string; description: string; descriptionAr: string; medium: string; dimensions: string; year: number; price: number; currency: string; status: string; featured: boolean; images: string[]; } | { ...; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<unknown> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }'.
        Type '{ artistId: number; galleryId: number; title: string; titleAr: string; description: string; descriptionAr: string; medium: string; dimensions: string; year: number; price: number; currency: string; status: string; featured: boolean; images: string[]; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; style?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; id?: number | SQL<unknown> | Placeholder<...> | undefined; ... 18 more ...; styleAr?: string | ... 3 more ... | undefined; }'.
          Types of property 'price' are incompatible.
            Type 'number' is not assignable to type 'string | SQL<unknown> | Placeholder<string, any> | null | undefined'.

894     const insertedArtworks = await db.insert(artworks).values(artworkData).returning();
                                                                  ~~~~~~~~~~~


server/seed.ts:902:63 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ artworkId: number; title: string; titleAr: string; description: string; descriptionAr: string; startDate: Date; endDate: Date; startingBid: number; currentBid: number; reservePrice: number; currency: string; status: string; bidCount: number; viewCount: number; }[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }'.
      Property 'title' is missing in type '{ artworkId: number; title: string; titleAr: string; description: string; descriptionAr: string; startDate: Date; endDate: Date; startingBid: number; currentBid: number; reservePrice: number; currency: string; status: string; bidCount: number; viewCount: number; }[]' but required in type '{ title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }'.
  Overload 2 of 2, '(values: { title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ artworkId: number; title: string; titleAr: string; description: string; descriptionAr: string; startDate: Date; endDate: Date; startingBid: number; currentBid: number; reservePrice: number; currency: string; status: string; bidCount: number; viewCount: number; }[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }[]'.
      Type '{ artworkId: number; title: string; titleAr: string; description: string; descriptionAr: string; startDate: Date; endDate: Date; startingBid: number; currentBid: number; reservePrice: number; currency: string; status: string; bidCount: number; viewCount: number; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; id?: number | SQL<unknown> | Placeholder<string, any> | undefined; status?: string | SQL<unknown> | Placeholder<...> | null | undefined; ... 11 more ...; bidCount?: number | ... 3 more ... | undefined; }'.
        Types of property 'currentBid' are incompatible.
          Type 'number' is not assignable to type 'string | SQL<unknown> | Placeholder<string, any> | null | undefined'.

902     const insertedAuctions = await db.insert(auctions).values(auctionData).returning();
                                                                  ~~~~~~~~~~~


server/seed.ts:910:55 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { id?: number | SQL<unknown> | Placeholder<string, any> | undefined; userId?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; createdAt?: Date | ... 3 more ... | undefined; amount?: string | ... 3 more ... | undefined; currency?: string | ... 3 more ... | undefined; auctionId?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Type '{ auctionId: number; userId: string; amount: number; currency: string; timestamp: Date; }[]' has no properties in common with type '{ id?: number | SQL<unknown> | Placeholder<string, any> | undefined; userId?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; createdAt?: Date | ... 3 more ... | undefined; amount?: string | ... 3 more ... | undefined; currency?: string | ... 3 more ... | undefined; auctionId?: number | ... 3 mo...'.
  Overload 2 of 2, '(values: { id?: number | SQL<unknown> | Placeholder<string, any> | undefined; userId?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; createdAt?: Date | ... 3 more ... | undefined; amount?: string | ... 3 more ... | undefined; currency?: string | ... 3 more ... | undefined; auctionId?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ auctionId: number; userId: string; amount: number; currency: string; timestamp: Date; }[]' is not assignable to parameter of type '{ id?: number | SQL<unknown> | Placeholder<string, any> | undefined; userId?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; createdAt?: Date | ... 3 more ... | undefined; amount?: string | ... 3 more ... | undefined; currency?: string | ... 3 more ... | undefined; auctionId?: number | ... 3 mo...'.
      Type '{ auctionId: number; userId: string; amount: number; currency: string; timestamp: Date; }' is not assignable to type '{ id?: number | SQL<unknown> | Placeholder<string, any> | undefined; userId?: string | SQL<unknown> | Placeholder<string, any> | null | undefined; createdAt?: Date | ... 3 more ... | undefined; amount?: string | ... 3 more ... | undefined; currency?: string | ... 3 more ... | undefined; auctionId?: number | ... 3 mo...'.
        Types of property 'amount' are incompatible.
          Type 'number' is not assignable to type 'string | SQL<unknown> | Placeholder<string, any> | null | undefined'.

910     const insertedBids = await db.insert(bids).values(bidData).returning();
                                                          ~~~~~~~


server/seed.ts:932:65 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '({ instructorId: string; title: string; titleAr: string; description: string; descriptionAr: string; instructorType: string; category: string; categoryAr: string; skillLevel: string; duration: number; ... 18 more ...; meetingLink?: undefined; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }'.
      Type '({ instructorId: string; title: string; titleAr: string; description: string; descriptionAr: string; instructorType: string; category: string; categoryAr: string; skillLevel: string; duration: number; ... 18 more ...; meetingLink?: undefined; } | { ...; })[]' is missing the following properties from type '{ title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }': title, duration, description, category, and 6 more.
  Overload 2 of 2, '(values: { title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '({ instructorId: string; title: string; titleAr: string; description: string; descriptionAr: string; instructorType: string; category: string; categoryAr: string; skillLevel: string; duration: number; ... 18 more ...; meetingLink?: undefined; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }[]'.
      Type '{ instructorId: string; title: string; titleAr: string; description: string; descriptionAr: string; instructorType: string; category: string; categoryAr: string; skillLevel: string; duration: number; ... 18 more ...; meetingLink?: undefined; } | { ...; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }'.
        Type '{ instructorId: string; title: string; titleAr: string; description: string; descriptionAr: string; instructorType: string; category: string; categoryAr: string; skillLevel: string; duration: number; ... 18 more ...; meetingLink?: undefined; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; duration: number | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<...>; ... 32 more ...; timezone?: string | ... 3 more ... | undefined; }'.
          Types of property 'averageRating' are incompatible.
            Type 'number' is not assignable to type 'string | SQL<unknown> | Placeholder<string, any> | null | undefined'.

932     const insertedWorkshops = await db.insert(workshops).values(workshopData).returning();
                                                                    ~~~~~~~~~~~~


server/seed.ts:942:59 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '({ organizerId: string; title: string; titleAr: string; description: string; descriptionAr: string; organizerType: string; category: string; categoryAr: string; venue: string; venueAr: string; ... 17 more ...; meetingLink?: undefined; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }'.
      Type '({ organizerId: string; title: string; titleAr: string; description: string; descriptionAr: string; organizerType: string; category: string; categoryAr: string; venue: string; venueAr: string; ... 17 more ...; meetingLink?: undefined; } | { ...; })[]' is missing the following properties from type '{ title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }': title, description, category, startDate, and 3 more.
  Overload 2 of 2, '(values: { title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '({ organizerId: string; title: string; titleAr: string; description: string; descriptionAr: string; organizerType: string; category: string; categoryAr: string; venue: string; venueAr: string; ... 17 more ...; meetingLink?: undefined; } | { ...; })[]' is not assignable to parameter of type '{ title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }[]'.
      Type '{ organizerId: string; title: string; titleAr: string; description: string; descriptionAr: string; organizerType: string; category: string; categoryAr: string; venue: string; venueAr: string; ... 17 more ...; meetingLink?: undefined; } | { ...; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }'.
        Type '{ organizerId: string; title: string; titleAr: string; description: string; descriptionAr: string; organizerType: string; category: string; categoryAr: string; venue: string; venueAr: string; address: string; ... 16 more ...; meetingLink?: undefined; }' is not assignable to type '{ title: string | SQL<unknown> | Placeholder<string, any>; description: string | SQL<unknown> | Placeholder<string, any>; category: string | SQL<unknown> | Placeholder<...>; ... 31 more ...; currentAttendees?: number | ... 3 more ... | undefined; }'.
          Types of property 'averageRating' are incompatible.
            Type 'number' is not assignable to type 'string | SQL<unknown> | Placeholder<string, any> | null | undefined'.

942     const insertedEvents = await db.insert(events).values(eventData).returning();
                                                              ~~~~~~~~~


server/seed.ts:956:76 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ collectorId: string; titleEn: string; titleAr: string; descriptionEn: string; descriptionAr: string; budgetMin: number; budgetMax: number; userId: string; title: string; description: string; ... 7 more ...; category: string; }[]' is not assignable to parameter of type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }'.
      Type '{ collectorId: string; titleEn: string; titleAr: string; descriptionEn: string; descriptionAr: string; budgetMin: number; budgetMax: number; userId: string; title: string; description: string; ... 7 more ...; category: string; }[]' is missing the following properties from type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }': titleAr, descriptionAr, collectorId, titleEn, descriptionEn
  Overload 2 of 2, '(values: { titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ collectorId: string; titleEn: string; titleAr: string; descriptionEn: string; descriptionAr: string; budgetMin: number; budgetMax: number; userId: string; title: string; description: string; ... 7 more ...; category: string; }[]' is not assignable to parameter of type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }[]'.
      Type '{ collectorId: string; titleEn: string; titleAr: string; descriptionEn: string; descriptionAr: string; budgetMin: number; budgetMax: number; userId: string; title: string; description: string; ... 7 more ...; category: string; }' is not assignable to type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }'.
        Types of property 'status' are incompatible.
          Type 'string' is not assignable to type '"open" | "completed" | "cancelled" | "in_progress" | SQL<unknown> | "expired" | Placeholder<string, any> | null | undefined'.

956     const insertedCommissions = await db.insert(commissionRequests).values(commissionData).returning();
                                                                               ~~~~~~~~~~~~~~


server/storage.ts:759:9 - error TS2393: Duplicate function implementation.

759   async getArtworksByGallery(galleryId: number, limit = 20): Promise<Artwork[]> {
            ~~~~~~~~~~~~~~~~~~~~

server/storage.ts:772:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColumn<...>; }, ... 5 m...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColu...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

772       queryBuilder = queryBuilder.where(
          ~~~~~~~~~~~~

server/storage.ts:784:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColumn<...>; }, ... 5 m...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColu...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

784       queryBuilder = queryBuilder.where(eq(artworks.category, filters.category));
          ~~~~~~~~~~~~

server/storage.ts:788:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColumn<...>; }, ... 5 m...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColu...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

788       queryBuilder = queryBuilder.where(eq(artworks.medium, filters.medium));
          ~~~~~~~~~~~~

server/storage.ts:792:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColumn<...>; }, ... 5 m...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColu...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

792       queryBuilder = queryBuilder.where(eq(artworks.artistId, filters.artistId));
          ~~~~~~~~~~~~

server/storage.ts:796:7 - error TS2740: Type 'Omit<PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColumn<...>; }, ... 5 m...' is missing the following properties from type 'PgSelectBase<"artworks", { id: PgColumn<{ name: "id"; tableName: "artworks"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 20 more ...; updatedAt: PgColu...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

796       queryBuilder = queryBuilder.where(ne(artworks.id, filters.excludeId));
          ~~~~~~~~~~~~

server/storage.ts:810:7 - error TS2740: Type 'Omit<PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 14 more ...; updatedAt: PgC...' is missing the following properties from type 'PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 14 more ...; updatedAt: PgColumn...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

810       queryBuilder = queryBuilder.where(
          ~~~~~~~~~~~~

server/storage.ts:821:7 - error TS2740: Type 'Omit<PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 14 more ...; updatedAt: PgC...' is missing the following properties from type 'PgSelectBase<"artists", { id: PgColumn<{ name: "id"; tableName: "artists"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 14 more ...; updatedAt: PgColumn...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

821       queryBuilder = queryBuilder.where(eq(artists.nationality, filters.nationality));
          ~~~~~~~~~~~~

server/storage.ts:835:7 - error TS2740: Type 'Omit<PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 15 more ...; updatedAt: PgColumn<...>; }, ... 5...' is missing the following properties from type 'PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 15 more ...; updatedAt: PgColumn<...>; }, ... 5 more...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

835       queryBuilder = queryBuilder.where(
          ~~~~~~~~~~~~

server/storage.ts:846:7 - error TS2740: Type 'Omit<PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 15 more ...; updatedAt: PgColumn<...>; }, ... 5...' is missing the following properties from type 'PgSelectBase<"galleries", { id: PgColumn<{ name: "id"; tableName: "galleries"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 15 more ...; updatedAt: PgColumn<...>; }, ... 5 more...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

846       queryBuilder = queryBuilder.where(eq(galleries.location, filters.location));
          ~~~~~~~~~~~~

server/storage.ts:870:9 - error TS2393: Duplicate function implementation.

870   async deleteArtwork(id: number): Promise<void> {
            ~~~~~~~~~~~~~

server/storage.ts:874:9 - error TS2393: Duplicate function implementation.

874   async getArtworksByGallery(galleryId: number, limit = 20): Promise<Artwork[]> {
            ~~~~~~~~~~~~~~~~~~~~

server/storage.ts:1214:9 - error TS2393: Duplicate function implementation.

1214   async deleteArtwork(id: number): Promise<void> {
             ~~~~~~~~~~~~~

server/storage.ts:1268:21 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"follows", { id: PgColumn<{ name: "id"; tableName: "follows"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; userId: PgColumn<...>; entityTy...'.

1268       query = query.where(eq(follows.entityType, entityType));
                         ~~~~~

server/storage.ts:1480:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1480     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1506:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1506     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1561:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1561     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1587:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1587     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1695:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1695     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1721:12 - error TS18047: 'result.rowCount' is possibly 'null'.

1721     return result.rowCount > 0;
                ~~~~~~~~~~~~~~~

server/storage.ts:1809:21 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"artist_analytics", { id: PgColumn<{ name: "id"; tableName: "artist_analytics"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 7 more ...; updatedAt: PgColumn<....'.

1809       query = query.where(and(
                         ~~~~~

server/storage.ts:2146:7 - error TS2740: Type 'Omit<PgSelectBase<"newsletter_subscribers", { id: PgColumn<{ name: "id"; tableName: "newsletter_subscribers"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 10 more ...; lastEmailSentAt: PgColumn<.....' is missing the following properties from type 'PgSelectBase<"newsletter_subscribers", { id: PgColumn<{ name: "id"; tableName: "newsletter_subscribers"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 10 more ...; lastEmailSentAt: PgColumn<...>; }...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

2146       query = query.where(eq(newsletterSubscribers.subscriptionStatus, status));
           ~~~~~

server/storage.ts:2189:7 - error TS2740: Type 'Omit<PgSelectBase<"email_notification_queue", { id: PgColumn<{ name: "id"; tableName: "email_notification_queue"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; ... 7 more ...; generated: undefined; }, {}, {}>; ... 13 more ...; createdAt: PgColumn<...>; }, ... 5 more .....' is missing the following properties from type 'PgSelectBase<"email_notification_queue", { id: PgColumn<{ name: "id"; tableName: "email_notification_queue"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 13 more ...; createdAt: PgColumn<...>; }, ...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

2189       query = query.where(eq(emailNotificationQueue.status, status));
           ~~~~~

server/storage.ts:2201:7 - error TS2740: Type 'Omit<PgSelectBase<"email_notification_log", { id: PgColumn<{ name: "id"; tableName: "email_notification_log"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 10 more ...; sentAt: PgColumn<...>; }, .....' is missing the following properties from type 'PgSelectBase<"email_notification_log", { id: PgColumn<{ name: "id"; tableName: "email_notification_log"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 10 more ...; sentAt: PgColumn<...>; }, ... 5 m...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

2201       query = query.where(eq(emailNotificationLog.recipientEmail, recipientEmail));
           ~~~~~

server/storage.ts:2214:21 - error TS2339: Property 'where' does not exist on type 'Omit<PgSelectBase<"achievement_badges", { id: PgColumn<{ name: "id"; tableName: "achievement_badges"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 12 more ...; createdAt: PgColumn<...>; }, ... 5 m...'.

2214       query = query.where(and(
                         ~~~~~

server/storage.ts:2372:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2372           currentValue = stats.totalSales;
               ~~~~~~~~~~~~

server/storage.ts:2378:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2378           currentValue = stats.totalFollowers;
               ~~~~~~~~~~~~

server/storage.ts:2381:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2381           currentValue = stats.totalViews;
               ~~~~~~~~~~~~

server/storage.ts:2384:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2384           currentValue = stats.totalArtworks;
               ~~~~~~~~~~~~

server/storage.ts:2387:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2387           currentValue = stats.totalWorkshops;
               ~~~~~~~~~~~~

server/storage.ts:2390:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2390           currentValue = stats.totalExhibitions;
               ~~~~~~~~~~~~

server/storage.ts:2396:11 - error TS2322: Type 'number | null' is not assignable to type 'number'.
  Type 'null' is not assignable to type 'number'.

2396           currentValue = stats.profileCompleteness;
               ~~~~~~~~~~~~

server/storage.ts:2425:32 - error TS18047: 'stats.achievementPoints' is possibly 'null'.

2425             achievementPoints: stats.achievementPoints + badge.pointsValue
                                    ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:2425:58 - error TS18047: 'badge.pointsValue' is possibly 'null'.

2425             achievementPoints: stats.achievementPoints + badge.pointsValue
                                                              ~~~~~~~~~~~~~~~~~

server/storage.ts:2906:7 - error TS2740: Type 'Omit<PgSelectBase<"dsar_requests", { id: PgColumn<{ name: "id"; tableName: "dsar_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 8 more ...; notes: PgColumn<...>; }, .....' is missing the following properties from type 'PgSelectBase<"dsar_requests", { id: PgColumn<{ name: "id"; tableName: "dsar_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 8 more ...; notes: PgColumn<...>; }, ... 5 m...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

2906       query = query.where(eq(dsarRequests.status, status as any));
           ~~~~~

server/storage.ts:2937:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

2937       details: { requestType: request.requestType }
           ~~~~~~~

server/storage.ts:2937:39 - error TS2339: Property 'requestType' does not exist on type '{ type: "delete" | "access" | "correct" | "portability"; userId: string; status?: "pending" | "completed" | "in_progress" | "rejected" | undefined; requestDetails?: Json | undefined; responseData?: Json | undefined; notes?: string | ... 1 more ... | undefined; }'.

2937       details: { requestType: request.requestType }
                                           ~~~~~~~~~~~

server/storage.ts:2945:25 - error TS2353: Object literal may only specify known properties, and 'updatedAt' does not exist in type '{ type?: "delete" | "access" | "correct" | "portability" | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; ... 8 more ...; notes?: string | ... 3 more ... | undefined; }'.

2945       .set({ ...update, updatedAt: new Date() })
                             ~~~~~~~~~

server/storage.ts:2951:22 - error TS2339: Property 'processedBy' does not exist on type 'Partial<{ type: "delete" | "access" | "correct" | "portability"; userId: string; status?: "pending" | "completed" | "in_progress" | "rejected" | undefined; requestDetails?: Json | undefined; responseData?: Json | undefined; notes?: string | ... 1 more ... | undefined; }>'.

2951       userId: update.processedBy || 'system',
                          ~~~~~~~~~~~

server/storage.ts:2955:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

2955       details: { status: update.status }
           ~~~~~~~

server/storage.ts:2977:7 - error TS2740: Type 'Omit<PgSelectBase<"audit_logs", { id: PgColumn<{ name: "id"; tableName: "audit_logs"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 8 more ...; createdAt: PgColumn<...>; }, ... ...' is missing the following properties from type 'PgSelectBase<"audit_logs", { id: PgColumn<{ name: "id"; tableName: "audit_logs"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 8 more ...; createdAt: PgColumn<...>; }, ... 5 mor...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

2977       query = query.where(and(...conditions));
           ~~~~~

server/storage.ts:3003:22 - error TS2551: Property 'reportedBy' does not exist on type '{ type: "other" | "spam" | "inappropriate" | "fake" | "copyright"; entityType: string; entityId: number; reporterId: string; status?: "pending" | "reviewing" | "resolved" | "dismissed" | undefined; description?: string | ... 1 more ... | undefined; }'. Did you mean 'reporterId'?

3003       userId: report.reportedBy,
                          ~~~~~~~~~~

server/storage.ts:3007:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3007       details: { reportType: report.reportType, reason: report.reason }
           ~~~~~~~

server/storage.ts:3007:37 - error TS2339: Property 'reportType' does not exist on type '{ type: "other" | "spam" | "inappropriate" | "fake" | "copyright"; entityType: string; entityId: number; reporterId: string; status?: "pending" | "reviewing" | "resolved" | "dismissed" | undefined; description?: string | ... 1 more ... | undefined; }'.

3007       details: { reportType: report.reportType, reason: report.reason }
                                         ~~~~~~~~~~

server/storage.ts:3007:64 - error TS2339: Property 'reason' does not exist on type '{ type: "other" | "spam" | "inappropriate" | "fake" | "copyright"; entityType: string; entityId: number; reporterId: string; status?: "pending" | "reviewing" | "resolved" | "dismissed" | undefined; description?: string | ... 1 more ... | undefined; }'.

3007       details: { reportType: report.reportType, reason: report.reason }
                                                                    ~~~~~~

server/storage.ts:3018:48 - error TS2339: Property 'reportType' does not exist on type 'PgTableWithColumns<{ name: "reports"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<.....'.

3018     if (reportType) conditions.push(eq(reports.reportType, reportType as any));
                                                    ~~~~~~~~~~

server/storage.ts:3021:7 - error TS2740: Type 'Omit<PgSelectBase<"reports", { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgCo...' is missing the following properties from type 'PgSelectBase<"reports", { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; ... 4 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

3021       query = query.where(and(...conditions));
           ~~~~~

server/storage.ts:3036:25 - error TS2353: Object literal may only specify known properties, and 'updatedAt' does not exist in type '{ type?: "other" | SQL<unknown> | "spam" | "inappropriate" | "fake" | "copyright" | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; ... 9 more ...; resolution?: string | ... 3 more ... | undefined; }'.

3036       .set({ ...update, updatedAt: new Date() })
                             ~~~~~~~~~

server/storage.ts:3042:22 - error TS2339: Property 'reviewedBy' does not exist on type 'Partial<{ type: "other" | "spam" | "inappropriate" | "fake" | "copyright"; entityType: string; entityId: number; reporterId: string; status?: "pending" | "reviewing" | "resolved" | "dismissed" | undefined; description?: string | ... 1 more ... | undefined; }>'.

3042       userId: update.reviewedBy || 'system',
                          ~~~~~~~~~~

server/storage.ts:3046:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3046       details: { status: update.status, resolution: update.resolution }
           ~~~~~~~

server/storage.ts:3046:60 - error TS2339: Property 'resolution' does not exist on type 'Partial<{ type: "other" | "spam" | "inappropriate" | "fake" | "copyright"; entityType: string; entityId: number; reporterId: string; status?: "pending" | "reviewing" | "resolved" | "dismissed" | undefined; description?: string | ... 1 more ... | undefined; }>'.

3046       details: { status: update.status, resolution: update.resolution }
                                                                ~~~~~~~~~~

server/storage.ts:3065:25 - error TS2551: Property 'reportedBy' does not exist on type 'PgTableWithColumns<{ name: "reports"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "reports"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<.....'. Did you mean 'reporterId'?

3065       .where(eq(reports.reportedBy, userId))
                             ~~~~~~~~~~

server/storage.ts:3080:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3080       details: { updateType: request.updateType }
           ~~~~~~~

server/storage.ts:3080:38 - error TS2339: Property 'updateType' does not exist on type '{ oldData: Json; newData: Json; auctionId: number; requestedBy: string; }'.

3080       details: { updateType: request.updateType }
                                          ~~~~~~~~~~

server/storage.ts:3091:58 - error TS2339: Property 'status' does not exist on type 'PgTableWithColumns<{ name: "auction_update_requests"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "auction_update_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; ... 8 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<......'.

3091     if (status) conditions.push(eq(auctionUpdateRequests.status, status as any));
                                                              ~~~~~~

server/storage.ts:3094:7 - error TS2740: Type 'Omit<PgSelectBase<"auction_update_requests", { id: PgColumn<{ name: "id"; tableName: "auction_update_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<...>; }...' is missing the following properties from type 'PgSelectBase<"auction_update_requests", { id: PgColumn<{ name: "id"; tableName: "auction_update_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 9 more ...; createdAt: PgColumn<...>; }, ......': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

3094       query = query.where(and(...conditions));
           ~~~~~

server/storage.ts:3102:25 - error TS2353: Object literal may only specify known properties, and 'updatedAt' does not exist in type '{ oldData?: unknown; newData?: unknown; auctionId?: number | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; ... 7 more ...; rejectionReason?: string | ... 3 more ... | undefined; }'.

3102       .set({ ...update, updatedAt: new Date() })
                             ~~~~~~~~~

server/storage.ts:3107:22 - error TS2339: Property 'reviewedBy' does not exist on type 'Partial<{ oldData: Json; newData: Json; auctionId: number; requestedBy: string; }>'.

3107       userId: update.reviewedBy || 'system',
                          ~~~~~~~~~~

server/storage.ts:3111:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3111       details: { status: update.status }
           ~~~~~~~

server/storage.ts:3111:33 - error TS2339: Property 'status' does not exist on type 'Partial<{ oldData: Json; newData: Json; auctionId: number; requestedBy: string; }>'.

3111       details: { status: update.status }
                                     ~~~~~~

server/storage.ts:3128:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3128       details: { documentType: doc.documentType }
           ~~~~~~~

server/storage.ts:3168:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3168       details: { status: update.verificationStatus }
           ~~~~~~~

server/storage.ts:3175:57 - error TS2552: Cannot find name 'KycVerificationRequirement'. Did you mean 'UserVerificationRequirement'?

3175   async getKycRequirements(sellerType: string): Promise<KycVerificationRequirement[]> {
                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3177:13 - error TS2304: Cannot find name 'kycVerificationRequirements'.

3177       .from(kycVerificationRequirements)
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3178:17 - error TS2304: Cannot find name 'kycVerificationRequirements'.

3178       .where(eq(kycVerificationRequirements.sellerType, sellerType))
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3179:16 - error TS2304: Cannot find name 'kycVerificationRequirements'.

3179       .orderBy(kycVerificationRequirements.sortOrder);
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3182:43 - error TS2552: Cannot find name 'InsertKycVerificationRequirement'. Did you mean 'UserVerificationRequirement'?

3182   async createKycRequirement(requirement: InsertKycVerificationRequirement): Promise<KycVerificationRequirement> {
                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3182:86 - error TS2552: Cannot find name 'KycVerificationRequirement'. Did you mean 'UserVerificationRequirement'?

3182   async createKycRequirement(requirement: InsertKycVerificationRequirement): Promise<KycVerificationRequirement> {
                                                                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3183:46 - error TS2304: Cannot find name 'kycVerificationRequirements'.

3183     const [newRequirement] = await db.insert(kycVerificationRequirements)
                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3191:47 - error TS2304: Cannot find name 'InsertKycVerificationSession'.

3191   async createKycVerificationSession(session: InsertKycVerificationSession): Promise<KycVerificationSession> {
                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3191:86 - error TS2304: Cannot find name 'KycVerificationSession'.

3191   async createKycVerificationSession(session: InsertKycVerificationSession): Promise<KycVerificationSession> {
                                                                                          ~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3192:42 - error TS2304: Cannot find name 'kycVerificationSessions'.

3192     const [newSession] = await db.insert(kycVerificationSessions)
                                              ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3201:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3201       details: { provider: session.provider, sellerType: session.sellerType }
           ~~~~~~~

server/storage.ts:3207:63 - error TS2304: Cannot find name 'KycVerificationSession'.

3207   async getKycVerificationSession(sessionId: string): Promise<KycVerificationSession | undefined> {
                                                                   ~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3209:13 - error TS2304: Cannot find name 'kycVerificationSessions'.

3209       .from(kycVerificationSessions)
                 ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3210:17 - error TS2304: Cannot find name 'kycVerificationSessions'.

3210       .where(eq(kycVerificationSessions.sessionId, sessionId));
                     ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3215:73 - error TS2304: Cannot find name 'InsertKycVerificationSession'.

3215   async updateKycVerificationSession(sessionId: string, update: Partial<InsertKycVerificationSession>): Promise<KycVerificationSession> {
                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3215:113 - error TS2304: Cannot find name 'KycVerificationSession'.

3215   async updateKycVerificationSession(sessionId: string, update: Partial<InsertKycVerificationSession>): Promise<KycVerificationSession> {
                                                                                                                     ~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3216:39 - error TS2304: Cannot find name 'kycVerificationSessions'.

3216     const [updated] = await db.update(kycVerificationSessions)
                                           ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3218:17 - error TS2304: Cannot find name 'kycVerificationSessions'.

3218       .where(eq(kycVerificationSessions.sessionId, sessionId))
                     ~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3226:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3226       details: { status: update.status }
           ~~~~~~~

server/storage.ts:3284:39 - error TS2339: Property 'isDefault' does not exist on type 'PgTableWithColumns<{ name: "shipping_addresses"; schema: undefined; columns: { id: PgColumn<{ name: "id"; tableName: "shipping_addresses"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; ... 8 more ...; generated: undefined; }, {}, {}>; ... 11 more ...; expiresAt: PgColumn<...>; }; dia...'.

3284       .orderBy(desc(shippingAddresses.isDefault), desc(shippingAddresses.createdAt));
                                           ~~~~~~~~~

server/storage.ts:3296:17 - error TS2339: Property 'isDefault' does not exist on type '{ country: string; userId: string; expiresAt: Date; addressLine1: string; city: string; postalCode: string; state?: string | null | undefined; phoneNumber?: string | null | undefined; orderId?: number | ... 1 more ... | undefined; addressLine2?: string | ... 1 more ... | undefined; deliveredAt?: Date | ... 1 more .....'.

3296     if (address.isDefault) {
                     ~~~~~~~~~

server/storage.ts:3298:16 - error TS2353: Object literal may only specify known properties, and 'isDefault' does not exist in type '{ country?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; userId?: string | SQL<unknown> | PgColumn<...> | undefined; ... 10 more ...; deliveredAt?: Date | ... 3 more ... | undefined; }'.

3298         .set({ isDefault: false })
                    ~~~~~~~~~

server/storage.ts:3311:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3311       details: { isDefault: address.isDefault }
           ~~~~~~~

server/storage.ts:3311:37 - error TS2339: Property 'isDefault' does not exist on type '{ country: string; userId: string; expiresAt: Date; addressLine1: string; city: string; postalCode: string; state?: string | null | undefined; phoneNumber?: string | null | undefined; orderId?: number | ... 1 more ... | undefined; addressLine2?: string | ... 1 more ... | undefined; deliveredAt?: Date | ... 1 more .....'.

3311       details: { isDefault: address.isDefault }
                                         ~~~~~~~~~

server/storage.ts:3319:17 - error TS2339: Property 'isDefault' does not exist on type 'Partial<{ country: string; userId: string; expiresAt: Date; addressLine1: string; city: string; postalCode: string; state?: string | null | undefined; phoneNumber?: string | null | undefined; orderId?: number | ... 1 more ... | undefined; addressLine2?: string | ... 1 more ... | undefined; deliveredAt?: Date | ... 1...'.

3319     if (address.isDefault) {
                     ~~~~~~~~~

server/storage.ts:3326:18 - error TS2353: Object literal may only specify known properties, and 'isDefault' does not exist in type '{ country?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; userId?: string | SQL<unknown> | PgColumn<...> | undefined; ... 10 more ...; deliveredAt?: Date | ... 3 more ... | undefined; }'.

3326           .set({ isDefault: false })
                      ~~~~~~~~~

server/storage.ts:3335:26 - error TS2353: Object literal may only specify known properties, and 'updatedAt' does not exist in type '{ country?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; userId?: string | SQL<unknown> | PgColumn<...> | undefined; ... 10 more ...; deliveredAt?: Date | ... 3 more ... | undefined; }'.

3335       .set({ ...address, updatedAt: new Date() })
                              ~~~~~~~~~

server/storage.ts:3344:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3344       details: { isDefault: address.isDefault }
           ~~~~~~~

server/storage.ts:3344:37 - error TS2339: Property 'isDefault' does not exist on type 'Partial<{ country: string; userId: string; expiresAt: Date; addressLine1: string; city: string; postalCode: string; state?: string | null | undefined; phoneNumber?: string | null | undefined; orderId?: number | ... 1 more ... | undefined; addressLine2?: string | ... 1 more ... | undefined; deliveredAt?: Date | ... 1...'.

3344       details: { isDefault: address.isDefault }
                                         ~~~~~~~~~

server/storage.ts:3364:9 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3364         details: { addressLine1: address.addressLine1 }
             ~~~~~~~

server/storage.ts:3372:14 - error TS2353: Object literal may only specify known properties, and 'isDefault' does not exist in type '{ country?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; userId?: string | SQL<unknown> | PgColumn<...> | undefined; ... 10 more ...; deliveredAt?: Date | ... 3 more ... | undefined; }'.

3372       .set({ isDefault: false })
                  ~~~~~~~~~

server/storage.ts:3377:14 - error TS2353: Object literal may only specify known properties, and 'isDefault' does not exist in type '{ country?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; userId?: string | SQL<unknown> | PgColumn<...> | undefined; ... 10 more ...; deliveredAt?: Date | ... 3 more ... | undefined; }'.

3377       .set({ isDefault: true, updatedAt: new Date() })
                  ~~~~~~~~~

server/storage.ts:3388:7 - error TS2353: Object literal may only specify known properties, and 'details' does not exist in type '{ action: string; entityType?: string | null | undefined; entityId?: string | null | undefined; userId?: string | null | undefined; oldData?: Json | undefined; newData?: Json | undefined; ipAddress?: string | ... 1 more ... | undefined; userAgent?: string | ... 1 more ... | undefined; }'.

3388       details: {}
           ~~~~~~~

server/storage.ts:3397:7 - error TS2740: Type 'Omit<PgSelectBase<"commission_requests", { id: PgColumn<{ name: "id"; tableName: "commission_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 22 more ...; expiresAt: PgColumn<...>; }, ... 5...' is missing the following properties from type 'PgSelectBase<"commission_requests", { id: PgColumn<{ name: "id"; tableName: "commission_requests"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; ... 6 more ...; generated: undefined; }, {}, {}>; ... 22 more ...; expiresAt: PgColumn<...>; }, ... 5 more...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

3397       query = query.where(eq(commissionRequests.status, status as any));
           ~~~~~

server/storage.ts:3422:15 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ titleAr: string; descriptionAr: string; collectorId: string; titleEn: string; descriptionEn: string; style?: string | null | undefined; status?: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null | undefined; ... 11 more ...; selectedBidId?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }'.
      Types of property 'referenceImages' are incompatible.
        Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; } | null | undefined' is not assignable to type 'string[] | SQL<unknown> | Placeholder<string, any> | null | undefined'.
          Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[] | SQL<unknown> | Placeholder<string, any> | null | undefined'.
            Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[]'.
              The types returned by 'pop()' are incompatible between these types.
                Type 'unknown' is not assignable to type 'string | undefined'.
  Overload 2 of 2, '(values: { titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ titleAr: string; descriptionAr: string; collectorId: string; titleEn: string; descriptionEn: string; style?: string | null | undefined; status?: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null | undefined; ... 11 more ...; selectedBidId?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }[]'.
      Type '{ titleAr: string; descriptionAr: string; collectorId: string; titleEn: string; descriptionEn: string; style?: string | null | undefined; status?: "open" | "completed" | "cancelled" | "in_progress" | "expired" | null | undefined; ... 11 more ...; selectedBidId?: number | ... 1 more ... | undefined; }' is missing the following properties from type '{ titleAr: string | SQL<unknown> | Placeholder<string, any>; descriptionAr: string | SQL<unknown> | Placeholder<string, any>; collectorId: string | SQL<...> | Placeholder<...>; ... 20 more ...; selectedBidId?: number | ... 3 more ... | undefined; }[]': length, pop, push, concat, and 35 more.

3422       .values(request)
                   ~~~~~~~


server/storage.ts:3438:12 - error TS2345: Argument of type '{ updatedAt: Date; titleAr?: string | undefined; descriptionAr?: string | undefined; collectorId?: string | undefined; titleEn?: string | undefined; descriptionEn?: string | undefined; ... 13 more ...; selectedBidId?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ titleAr?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; descriptionAr?: string | SQL<...> | PgColumn<...> | undefined; ... 21 more ...; selectedBidId?: number | ... 3 more ... | undefined; }'.
  Types of property 'referenceImages' are incompatible.
    Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; } | null | undefined' is not assignable to type 'string[] | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | null | undefined'.
      Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[] | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | null | undefined'.
        Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[]'.
          The types returned by 'pop()' are incompatible between these types.
            Type 'unknown' is not assignable to type 'string | undefined'.

3438       .set({ ...request, updatedAt: new Date() })
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3593:15 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { message: string | SQL<unknown> | Placeholder<string, any>; senderId: string | SQL<unknown> | Placeholder<string, any>; commissionRequestId: number | SQL<...> | Placeholder<...>; ... 5 more ...; isRead?: boolean | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ message: string; senderId: string; commissionRequestId: number; senderType: string; attachments?: { [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more .....' is not assignable to parameter of type '{ message: string | SQL<unknown> | Placeholder<string, any>; senderId: string | SQL<unknown> | Placeholder<string, any>; commissionRequestId: number | SQL<...> | Placeholder<...>; ... 5 more ...; isRead?: boolean | ... 3 more ... | undefined; }'.
      Types of property 'attachments' are incompatible.
        Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; } | null | undefined' is not assignable to type 'string[] | SQL<unknown> | Placeholder<string, any> | null | undefined'.
          Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[] | SQL<unknown> | Placeholder<string, any> | null | undefined'.
            Type '{ [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'string[]'.
              The types returned by 'pop()' are incompatible between these types.
                Type 'unknown' is not assignable to type 'string | undefined'.
  Overload 2 of 2, '(values: { message: string | SQL<unknown> | Placeholder<string, any>; senderId: string | SQL<unknown> | Placeholder<string, any>; commissionRequestId: number | SQL<...> | Placeholder<...>; ... 5 more ...; isRead?: boolean | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ message: string; senderId: string; commissionRequestId: number; senderType: string; attachments?: { [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more .....' is not assignable to parameter of type '{ message: string | SQL<unknown> | Placeholder<string, any>; senderId: string | SQL<unknown> | Placeholder<string, any>; commissionRequestId: number | SQL<...> | Placeholder<...>; ... 5 more ...; isRead?: boolean | ... 3 more ... | undefined; }[]'.
      Type '{ message: string; senderId: string; commissionRequestId: number; senderType: string; attachments?: { [x: number]: string; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more .....' is missing the following properties from type '{ message: string | SQL<unknown> | Placeholder<string, any>; senderId: string | SQL<unknown> | Placeholder<string, any>; commissionRequestId: number | SQL<...> | Placeholder<...>; ... 5 more ...; isRead?: boolean | ... 3 more ... | undefined; }[]': length, pop, push, concat, and 35 more.

3593       .values(message)
                   ~~~~~~~


server/storage.ts:3617:15 - error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { commissionRequestId: number | SQL<unknown> | Placeholder<string, any>; bidId: number | SQL<unknown> | Placeholder<string, any>; agreedPrice: string | SQL<...> | Placeholder<...>; ... 12 more ...; artistRating?: number | ... 3 more ... | undefined; }): PgInsertBase<...>', gave the following error.
    Argument of type '{ commissionRequestId: number; bidId: number; agreedPrice: string; agreedDeadline: Date; contractTerms: string; status?: string | null | undefined; completedAt?: Date | null | undefined; ... 5 more ...; artistRating?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ commissionRequestId: number | SQL<unknown> | Placeholder<string, any>; bidId: number | SQL<unknown> | Placeholder<string, any>; agreedPrice: string | SQL<...> | Placeholder<...>; ... 12 more ...; artistRating?: number | ... 3 more ... | undefined; }'.
      Types of property 'progressUpdates' are incompatible.
        Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; } | nu...' is not assignable to type 'SQL<unknown> | { date: string; description: string; images?: string[] | undefined; }[] | Placeholder<string, any> | null | undefined'.
          Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'SQL<unknown> | { date: string; description: string; images?: string[] | undefined; }[] | Placeholder<string, any> | null | undefined'.
            Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type '{ date: string; description: string; images?: string[] | undefined; }[]'.
              The types returned by 'pop()' are incompatible between these types.
                Type 'unknown' is not assignable to type '{ date: string; description: string; images?: string[] | undefined; } | undefined'.
  Overload 2 of 2, '(values: { commissionRequestId: number | SQL<unknown> | Placeholder<string, any>; bidId: number | SQL<unknown> | Placeholder<string, any>; agreedPrice: string | SQL<...> | Placeholder<...>; ... 12 more ...; artistRating?: number | ... 3 more ... | undefined; }[]): PgInsertBase<...>', gave the following error.
    Argument of type '{ commissionRequestId: number; bidId: number; agreedPrice: string; agreedDeadline: Date; contractTerms: string; status?: string | null | undefined; completedAt?: Date | null | undefined; ... 5 more ...; artistRating?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ commissionRequestId: number | SQL<unknown> | Placeholder<string, any>; bidId: number | SQL<unknown> | Placeholder<string, any>; agreedPrice: string | SQL<...> | Placeholder<...>; ... 12 more ...; artistRating?: number | ... 3 more ... | undefined; }[]'.
      Type '{ commissionRequestId: number; bidId: number; agreedPrice: string; agreedDeadline: Date; contractTerms: string; status?: string | null | undefined; completedAt?: Date | null | undefined; ... 5 more ...; artistRating?: number | ... 1 more ... | undefined; }' is missing the following properties from type '{ commissionRequestId: number | SQL<unknown> | Placeholder<string, any>; bidId: number | SQL<unknown> | Placeholder<string, any>; agreedPrice: string | SQL<...> | Placeholder<...>; ... 12 more ...; artistRating?: number | ... 3 more ... | undefined; }[]': length, pop, push, concat, and 35 more.

3617       .values(contract)
                   ~~~~~~~~


server/storage.ts:3633:12 - error TS2345: Argument of type '{ updatedAt: Date; commissionRequestId?: number | undefined; bidId?: number | undefined; agreedPrice?: string | undefined; agreedDeadline?: Date | undefined; contractTerms?: string | undefined; ... 7 more ...; artistRating?: number | ... 1 more ... | undefined; }' is not assignable to parameter of type '{ commissionRequestId?: number | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; bidId?: number | ... 2 more ... | undefined; ... 13 more ...; artistRating?: number | ... 3 more ... | undefined; }'.
  Types of property 'progressUpdates' are incompatible.
    Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; } | nu...' is not assignable to type 'SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | { date: string; description: string; images?: string[] | undefined; }[] | null | undefined'.
      Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type 'SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | { date: string; description: string; images?: string[] | undefined; }[] | null | undefined'.
        Type '{ [x: number]: { date: string; description: string; images?: unknown; }; length: number; toString: () => string; toLocaleString: { (): string; (locales: string | string[], options?: (NumberFormatOptions & DateTimeFormatOptions) | undefined): string; }; ... 37 more ...; readonly [Symbol.unscopables]: { ...; }; }' is not assignable to type '{ date: string; description: string; images?: string[] | undefined; }[]'.
          The types returned by 'pop()' are incompatible between these types.
            Type 'unknown' is not assignable to type '{ date: string; description: string; images?: string[] | undefined; } | undefined'.

3633       .set({ ...contract, updatedAt: new Date() })
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server/storage.ts:3666:14 - error TS2322: Type 'string' is not assignable to type '"join" | "aware" | "explore" | "transact" | "retain" | "advocate" | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | null | undefined'.

3666       .set({ lifecycleStage: stage, updatedAt: new Date() })
                  ~~~~~~~~~~~~~~

  node_modules/drizzle-orm/pg-core/query-builders/update.d.ts:27:57
    27 export type PgUpdateSetSource<TTable extends PgTable> = {
                                                               ~
    28     [Key in keyof TTable['$inferInsert']]?: GetColumnData<TTable['_']['columns'][Key]> | SQL | PgColumn | undefined;
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    29 } & {};
       ~
    The expected type comes from property 'lifecycleStage' which is declared here on type '{ id?: string | SQL<unknown> | PgColumn<ColumnBaseConfig<ColumnDataType, string>, {}, {}> | undefined; role?: string | SQL<unknown> | PgColumn<...> | null | undefined; ... 12 more ...; lastActiveAt?: Date | ... 3 more ... | undefined; }'

server/storage.ts:3678:76 - error TS2769: No overload matches this call.
  Overload 1 of 3, '(left: PgColumn<{ name: "lifecycle_stage"; tableName: "users"; dataType: "string"; columnType: "PgEnumColumn"; data: "join" | "aware" | "explore" | "transact" | "retain" | "advocate"; driverParam: string; ... 8 more ...; generated: undefined; }, {}, {}>, right: "join" | ... 5 more ... | SQLWrapper): SQL<...>', gave the following error.
    Argument of type 'string' is not assignable to parameter of type '"join" | "aware" | "explore" | "transact" | "retain" | "advocate" | SQLWrapper'.
  Overload 2 of 3, '(left: Aliased<string>, right: string | SQLWrapper): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "lifecycle_stage"; tableName: "users"; dataType: "string"; columnType: "PgEnumColumn"; data: "join" | "aware" | "explore" | "transact" | "retain" | "advocate"; driverParam: string; ... 8 more ...; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'Aliased<string>'.
      Type 'PgColumn<{ name: "lifecycle_stage"; tableName: "users"; dataType: "string"; columnType: "PgEnumColumn"; data: "join" | "aware" | "explore" | "transact" | "retain" | "advocate"; driverParam: string; ... 8 more ...; generated: undefined; }, {}, {}>' is missing the following properties from type 'Aliased<string>': sql, fieldAlias
  Overload 3 of 3, '(left: never, right: unknown): SQL<unknown>', gave the following error.
    Argument of type 'PgColumn<{ name: "lifecycle_stage"; tableName: "users"; dataType: "string"; columnType: "PgEnumColumn"; data: "join" | "aware" | "explore" | "transact" | "retain" | "advocate"; driverParam: string; ... 8 more ...; generated: undefined; }, {}, {}>' is not assignable to parameter of type 'never'.

3678     const [result] = await db.select({ count: count() }).from(users).where(eq(users.lifecycleStage, stage));
                                                                                ~~


server/storage.ts:3742:7 - error TS2740: Type 'Omit<PgSelectBase<"search_index", { id: PgColumn<{ name: "id"; tableName: "search_index"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 12 more ...; updatedAt: PgColumn<...>; },...' is missing the following properties from type 'PgSelectBase<"search_index", { id: PgColumn<{ name: "id"; tableName: "search_index"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 12 more ...; updatedAt: PgColumn<...>; }, ... ...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

3742       queryBuilder = queryBuilder.where(
           ~~~~~~~~~~~~

server/storage.ts:3754:7 - error TS2740: Type 'Omit<PgSelectBase<"search_index", { id: PgColumn<{ name: "id"; tableName: "search_index"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 12 more ...; updatedAt: PgColumn<...>; },...' is missing the following properties from type 'PgSelectBase<"search_index", { id: PgColumn<{ name: "id"; tableName: "search_index"; dataType: "number"; columnType: "PgSerial"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; ... 5 more ...; generated: undefined; }, {}, {}>; ... 12 more ...; updatedAt: PgColumn<...>; }, ... ...': config, joinsNotNullableMap, tableName, isPartialSelect, and 5 more.

3754       queryBuilder = queryBuilder.where(
           ~~~~~~~~~~~~

shared/schema.ts:1248:36 - error TS2304: Cannot find name 'articles'.

1248 export type InsertArticle = typeof articles.$inferInsert;
                                        ~~~~~~~~

shared/schema.ts:1249:30 - error TS2304: Cannot find name 'articles'.

1249 export type Article = typeof articles.$inferSelect;
                                  ~~~~~~~~


Found 679 errors in 60 files.

Errors  Files
     3  client/src/components/ArtTimeline.tsx:74
     5  client/src/components/ArtworkCard.tsx:71
     3  client/src/components/CuratorsPicks.tsx:137
     2  client/src/components/ErrorBoundary.tsx:37
     2  client/src/components/Navbar.tsx:76
    55  client/src/components/SocialComponents.tsx:56
    16  client/src/components/admin/AdvancedUserManagement.tsx:94
    27  client/src/components/analytics/AdvancedAnalyticsDashboard.tsx:160
     9  client/src/components/notifications/NotificationCenter.tsx:122
     5  client/src/components/payment/PaymentMethodManager.tsx:145
     3  client/src/hooks/useRoleSetup.ts:19
    11  client/src/lib/i18n.ts:148
     1  client/src/lib/queryClient.ts:64
    19  client/src/pages/AchievementsPage.tsx:92
     1  client/src/pages/AdminDashboard.tsx:509
     3  client/src/pages/AdminSetup.tsx:64
    27  client/src/pages/AdminTest.tsx:29
    14  client/src/pages/Analytics.tsx:25
     1  client/src/pages/AnalyticsDashboard.tsx:219
     3  client/src/pages/Artists.tsx:29
     3  client/src/pages/ArtworkDetail.tsx:115
     9  client/src/pages/ArtworkManagement.tsx:154
     1  client/src/pages/AuctionDetail.tsx:101
    10  client/src/pages/Auctions.tsx:160
     8  client/src/pages/AuthTest.tsx:32
     1  client/src/pages/CollectorDashboard.tsx:201
    13  client/src/pages/CommissionDetail.tsx:103
     6  client/src/pages/CommissionRequests.tsx:58
     2  client/src/pages/Community.tsx:76
    18  client/src/pages/Dashboard.tsx:106
     3  client/src/pages/Editorial.tsx:30
    10  client/src/pages/EmailTest.tsx:33
     5  client/src/pages/Events.tsx:65
     3  client/src/pages/Galleries.tsx:31
    11  client/src/pages/Home.tsx:49
     2  client/src/pages/InvoiceManagement.tsx:16
     1  client/src/pages/Landing.tsx:53
     5  client/src/pages/ManageEvents.tsx:101
     5  client/src/pages/ManageWorkshops.tsx:103
     2  client/src/pages/RoleSelection.tsx:138
     8  client/src/pages/SellerDashboard.tsx:321
     3  client/src/pages/ShippingManagement.tsx:16
     2  client/src/pages/TestCommissions.tsx:30
     1  client/src/pages/UserPreferences.tsx:48
     5  client/src/pages/Workshops.tsx:63
     3  server/emailService.ts:165
    17  server/index.ts:50
     2  server/middleware/cacheOptimization.ts:70
     3  server/middleware/caching.ts:37
     7  server/middleware/imageOptimization.ts:3
     1  server/middleware/performance.ts:125
    12  server/middleware/security.ts:35
     2  server/middleware/trackStage.ts:44
     3  server/replitAuth.ts:106
   138  server/routes.ts:69
    16  server/routes/admin.ts:40
    15  server/routes/seller.ts:53
     6  server/seed.ts:894
   105  server/storage.ts:759
     2  shared/schema.ts:1248
~/workspace$ npx prettier --check
Usage: prettier [options] [file/dir/glob ...]

By default, output is written to stdout.
Stdin is read if it is piped to Prettier and no files are given.

Output options:

  -c, --check              Check if the given files are formatted, print a human-friendly summary
                           message and paths to unformatted files (see also --list-different).
  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).
  -w, --write              Edit files in-place. (Beware!)

Format options:

  --arrow-parens <always|avoid>
                           Include parentheses around a sole arrow function parameter.
                           Defaults to always.
  --bracket-same-line      Put > of opening tags on the last line instead of on a new line.
                           Defaults to false.
  --no-bracket-spacing     Do not print spaces between brackets.
  --embedded-language-formatting <auto|off>
                           Control how Prettier formats quoted code embedded in the file.
                           Defaults to auto.
  --end-of-line <lf|crlf|cr|auto>
                           Which end of line characters to apply.
                           Defaults to lf.
  --experimental-operator-position <start|end>
                           Where to print operators when binary expressions wrap lines.
                           Defaults to end.
  --no-experimental-ternaries
                           Default behavior of ternaries; keep question marks on the same line as the consequent.
  --html-whitespace-sensitivity <css|strict|ignore>
                           How to handle whitespaces in HTML.
                           Defaults to css.
  --jsx-single-quote       Use single quotes in JSX.
                           Defaults to false.
  --object-wrap <preserve|collapse>
                           How to wrap object literals.
                           Defaults to preserve.
  --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|jsonc|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc|mjml>
                           Which parser to use.
  --print-width <int>      The line length where Prettier will try wrap.
                           Defaults to 80.
  --prose-wrap <always|never|preserve>
                           How to wrap prose.
                           Defaults to preserve.
  --quote-props <as-needed|consistent|preserve>
                           Change when properties in objects are quoted.
                           Defaults to as-needed.
  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.
  --single-attribute-per-line
                           Enforce single attribute per line in HTML, Vue and JSX.
                           Defaults to false.
  --single-quote           Use single quotes instead of double quotes.
                           Defaults to false.
  --tab-width <int>        Number of spaces per indentation level.
                           Defaults to 2.
  --trailing-comma <all|es5|none>
                           Print trailing commas wherever possible when multi-line.
                           Defaults to all.
  --use-tabs               Indent with tabs instead of spaces.
                           Defaults to false.
  --vue-indent-script-and-style
                           Indent script and style tags in Vue files.
                           Defaults to false.

Config options:

  --config <path>          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).
  --no-config              Do not look for a configuration file.
  --config-precedence <cli-override|file-override|prefer-file>
                           Define in which order config files and CLI options should be evaluated.
                           Defaults to cli-override.
  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.
  --find-config-path <path>
                           Find and print the path to a configuration file for the given input file.
  --ignore-path <path>     Path to a file with patterns describing files to ignore.
                           Multiple values are accepted.
                           Defaults to [.gitignore, .prettierignore].
  --plugin <path>          Add a plugin. Multiple plugins can be passed as separate `--plugin`s.
                           Defaults to [].
  --with-node-modules      Process files inside 'node_modules' directory.

Editor options:

  --cursor-offset <int>    Print (to stderr) where a cursor at the given position would move to after formatting.
                           Defaults to -1.
  --range-end <int>        Format code ending at a given character offset (exclusive).
                           The range will extend forwards to the end of the selected statement.
                           Defaults to Infinity.
  --range-start <int>      Format code starting at a given character offset.
                           The range will extend backwards to the start of the first line containing the selected statement.
                           Defaults to 0.

Other options:

  --cache                  Only format changed files. Cannot use with --stdin-filepath.
                           Defaults to false.
  --cache-location <path>  Path to the cache file.
  --cache-strategy <metadata|content>
                           Strategy for the cache to use for detecting changed files.
  --check-ignore-pragma    Check whether the file's first docblock comment contains '@noprettier' or '@noformat' to determine if it should be formatted.
                           Defaults to false.
  --no-color               Do not colorize error messages.
  --no-error-on-unmatched-pattern
                           Prevent errors when pattern is unmatched.
  --file-info <path>       Extract the following info (as JSON) for a given file path. Reported fields:
                           * ignored (boolean) - true if file path is filtered by --ignore-path
                           * inferredParser (string | null) - name of parser inferred from file path
  -h, --help <flag>        Show CLI usage, or details about the given flag.
                           Example: --help write
  -u, --ignore-unknown     Ignore unknown files.
  --insert-pragma          Insert @format pragma into file's first docblock comment.
                           Defaults to false.
  --log-level <silent|error|warn|log|debug>
                           What level of logs to report.
                           Defaults to log.
  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted.
                           Defaults to false.
  --stdin-filepath <path>  Path to the file to pretend that stdin comes from.
  --support-info           Print support information as JSON.
  -v, --version            Print Prettier version.


~/workspace$ 